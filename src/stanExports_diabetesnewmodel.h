// Generated by rstantools.  Do not edit by hand.

/*
    stanModels is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stanModels is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with stanModels.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_diabetesnewmodel_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_diabetesnewmodel");
    reader.add_event(1620, 1618, "end", "model_diabetesnewmodel");
    return reader;
}
template <typename T0__, class RNG>
std::vector<typename boost::math::tools::promote_args<T0__>::type>
weightRedux_rng(const std::vector<T0__>& update, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 5;
        validate_non_negative_index("male_weightredux", "7", 7);
        std::vector<local_scalar_t__  > male_weightredux(7, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(male_weightredux, DUMMY_VAR__);
        stan::math::fill(male_weightredux, DUMMY_VAR__);
        current_statement_begin__ = 6;
        validate_non_negative_index("female_weightredux", "7", 7);
        std::vector<local_scalar_t__  > female_weightredux(7, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(female_weightredux, DUMMY_VAR__);
        stan::math::fill(female_weightredux, DUMMY_VAR__);
        current_statement_begin__ = 7;
        local_scalar_t__ current_weight(DUMMY_VAR__);
        (void) current_weight;  // dummy to suppress unused var warning
        stan::math::initialize(current_weight, DUMMY_VAR__);
        stan::math::fill(current_weight, DUMMY_VAR__);
        current_statement_begin__ = 8;
        local_scalar_t__ current_height(DUMMY_VAR__);
        (void) current_height;  // dummy to suppress unused var warning
        stan::math::initialize(current_height, DUMMY_VAR__);
        stan::math::fill(current_height, DUMMY_VAR__);
        current_statement_begin__ = 9;
        int age_group_index(0);
        (void) age_group_index;  // dummy to suppress unused var warning
        stan::math::fill(age_group_index, std::numeric_limits<int>::min());
        current_statement_begin__ = 11;
        stan::model::assign(male_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    2.351, 
                    "assigning variable male_weightredux");
        current_statement_begin__ = 12;
        stan::model::assign(male_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    1.227, 
                    "assigning variable male_weightredux");
        current_statement_begin__ = 13;
        stan::model::assign(male_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    1.652, 
                    "assigning variable male_weightredux");
        current_statement_begin__ = 14;
        stan::model::assign(male_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                    1.412, 
                    "assigning variable male_weightredux");
        current_statement_begin__ = 15;
        stan::model::assign(male_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                    1.102, 
                    "assigning variable male_weightredux");
        current_statement_begin__ = 16;
        stan::model::assign(male_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                    0.638, 
                    "assigning variable male_weightredux");
        current_statement_begin__ = 17;
        stan::model::assign(male_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                    0.795, 
                    "assigning variable male_weightredux");
        current_statement_begin__ = 19;
        stan::model::assign(female_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    1.562, 
                    "assigning variable female_weightredux");
        current_statement_begin__ = 20;
        stan::model::assign(female_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    1.320, 
                    "assigning variable female_weightredux");
        current_statement_begin__ = 21;
        stan::model::assign(female_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    1.123, 
                    "assigning variable female_weightredux");
        current_statement_begin__ = 22;
        stan::model::assign(female_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                    0.784, 
                    "assigning variable female_weightredux");
        current_statement_begin__ = 23;
        stan::model::assign(female_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                    0.647, 
                    "assigning variable female_weightredux");
        current_statement_begin__ = 24;
        stan::model::assign(female_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                    0.472, 
                    "assigning variable female_weightredux");
        current_statement_begin__ = 25;
        stan::model::assign(female_weightredux, 
                    stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                    0.567, 
                    "assigning variable female_weightredux");
        current_statement_begin__ = 27;
        stan::math::assign(temp, update);
        current_statement_begin__ = 28;
        stan::math::assign(age_group_index, 0);
        current_statement_begin__ = 29;
        while (as_bool(logical_gte((get_base1(temp, 1, "temp", 1) / 10), (age_group_index + 2)))) {
            current_statement_begin__ = 30;
            stan::math::assign(age_group_index, (age_group_index + 1));
        }
        current_statement_begin__ = 32;
        if (as_bool(logical_gt(age_group_index, 7))) {
            current_statement_begin__ = 33;
            stan::math::assign(age_group_index, 7);
        }
        current_statement_begin__ = 36;
        stan::math::assign(current_height, get_base1(temp, 6, "temp", 1));
        current_statement_begin__ = 37;
        if (as_bool(logical_eq(get_base1(temp, 3, "temp", 1), 0))) {
            current_statement_begin__ = 38;
            stan::math::assign(current_weight, (get_base1(temp, 5, "temp", 1) - normal_rng(get_base1(female_weightredux, age_group_index, "female_weightredux", 1), (get_base1(female_weightredux, age_group_index, "female_weightredux", 1) * 0.2), base_rng__)));
        } else {
            current_statement_begin__ = 42;
            stan::math::assign(current_weight, (get_base1(temp, 5, "temp", 1) - normal_rng(get_base1(male_weightredux, age_group_index, "male_weightredux", 1), (get_base1(male_weightredux, age_group_index, "male_weightredux", 1) * 0.2), base_rng__)));
        }
        current_statement_begin__ = 46;
        stan::model::assign(temp, 
                    stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                    current_weight, 
                    "assigning variable temp");
        current_statement_begin__ = 48;
        if (as_bool(logical_eq(get_base1(temp, 52, "temp", 1), 1))) {
            current_statement_begin__ = 49;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(13), stan::model::nil_index_list()), 
                        (current_weight / pow(current_height, 2)), 
                        "assigning variable temp");
        } else if (as_bool(logical_eq(get_base1(temp, 52, "temp", 1), 0))) {
            current_statement_begin__ = 52;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(56), stan::model::nil_index_list()), 
                        (current_weight / pow(current_height, 2)), 
                        "assigning variable temp");
        }
        current_statement_begin__ = 55;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weightRedux_rng_functor__ {
    template <typename T0__, class RNG>
        std::vector<typename boost::math::tools::promote_args<T0__>::type>
    operator()(const std::vector<T0__>& update, RNG& base_rng__, std::ostream* pstream__) const {
        return weightRedux_rng(update, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__>::type>::type>::type>
simDiabetes(const std::vector<T0__>& update,
                const T1__& intercept,
                const T2__& age,
                const T3__& bmi,
                const T4__& sbp,
                const T5__& dbp,
                const T6__& bgl,
                const T7__& hdl,
                const T8__& trig,
                const T9__& female,
                const T10__& ethni,
                const T11__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 61;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 62;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 63;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 64;
        local_scalar_t__ current_age(DUMMY_VAR__);
        (void) current_age;  // dummy to suppress unused var warning
        stan::math::initialize(current_age, DUMMY_VAR__);
        stan::math::fill(current_age, DUMMY_VAR__);
        current_statement_begin__ = 65;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 67;
        stan::math::assign(temp, update);
        current_statement_begin__ = 68;
        stan::math::assign(current_age, get_base1(temp, 1, "temp", 1));
        current_statement_begin__ = 70;
        stan::math::assign(predictor, (((((((((intercept + (age * get_base1(temp, 1, "temp", 1))) + (hdl * get_base1(temp, 58, "temp", 1))) + (trig * get_base1(temp, 55, "temp", 1))) + (bgl * get_base1(temp, 54, "temp", 1))) + (bmi * get_base1(temp, 56, "temp", 1))) + (dbp * get_base1(temp, 53, "temp", 1))) + (sbp * get_base1(temp, 57, "temp", 1))) + (female * (1 - get_base1(temp, 3, "temp", 1)))) + (ethni * (logical_eq(get_base1(temp, 4, "temp", 1), 0) ? 1 : 0 ))));
        current_statement_begin__ = 74;
        stan::math::assign(H1, (1 / (1 + stan::math::exp(-(predictor)))));
        current_statement_begin__ = 75;
        stan::math::assign(prob, (1 - pow((1 - H1), (1.0 / 10))));
        current_statement_begin__ = 76;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 77;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(52), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 78;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        current_age, 
                        "assigning variable temp");
            current_statement_begin__ = 79;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 81;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simDiabetes_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
                const T1__& intercept,
                const T2__& age,
                const T3__& bmi,
                const T4__& sbp,
                const T5__& dbp,
                const T6__& bgl,
                const T7__& hdl,
                const T8__& trig,
                const T9__& female,
                const T10__& ethni,
                const T11__& rand, std::ostream* pstream__) const {
        return simDiabetes(update, intercept, age, bmi, sbp, dbp, bgl, hdl, trig, female, ethni, rand, pstream__);
    }
};
template <typename T0__, typename T1__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__>::type>
simDeath_not2d(const std::vector<T0__>& update,
                   const T1__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 85;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 86;
        int age_group_index(0);
        (void) age_group_index;  // dummy to suppress unused var warning
        stan::math::fill(age_group_index, std::numeric_limits<int>::min());
        current_statement_begin__ = 87;
        validate_non_negative_index("male_death_prob", "18", 18);
        std::vector<local_scalar_t__  > male_death_prob(18, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(male_death_prob, DUMMY_VAR__);
        stan::math::fill(male_death_prob, DUMMY_VAR__);
        current_statement_begin__ = 88;
        validate_non_negative_index("female_death_prob", "18", 18);
        std::vector<local_scalar_t__  > female_death_prob(18, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(female_death_prob, DUMMY_VAR__);
        stan::math::fill(female_death_prob, DUMMY_VAR__);
        current_statement_begin__ = 89;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 91;
        stan::math::assign(temp, update);
        current_statement_begin__ = 93;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    0.013474053, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 94;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    0.002120751, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 95;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    0.001161851, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 96;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                    0.001658403, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 97;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                    0.005024379, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 98;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                    0.008528301, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 99;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                    0.010602457, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 100;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list()), 
                    0.01215091, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 101;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list()), 
                    0.015116213, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 102;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list()), 
                    0.020255891, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 103;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list()), 
                    0.025589345, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 104;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list()), 
                    0.036561306, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 105;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(13), stan::model::nil_index_list()), 
                    0.051702029, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 106;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(14), stan::model::nil_index_list()), 
                    0.071972068, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 107;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(15), stan::model::nil_index_list()), 
                    0.109105713, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 108;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(16), stan::model::nil_index_list()), 
                    0.150325933, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 109;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(17), stan::model::nil_index_list()), 
                    0.22667667, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 110;
        stan::model::assign(male_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(18), stan::model::nil_index_list()), 
                    0.360242006, 
                    "assigning variable male_death_prob");
        current_statement_begin__ = 112;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    0.011028114, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 113;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    0.00186436, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 114;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    0.001021302, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 115;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                    0.001215887, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 116;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                    0.002009777, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 117;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                    0.002782015, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 118;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                    0.003305858, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 119;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list()), 
                    0.003894631, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 120;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list()), 
                    0.005597997, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 121;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list()), 
                    0.008382667, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 122;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list()), 
                    0.012202781, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 123;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list()), 
                    0.019929291, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 124;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(13), stan::model::nil_index_list()), 
                    0.031109977, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 125;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(14), stan::model::nil_index_list()), 
                    0.047429027, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 126;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(15), stan::model::nil_index_list()), 
                    0.075366165, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 127;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(16), stan::model::nil_index_list()), 
                    0.111119515, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 128;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(17), stan::model::nil_index_list()), 
                    0.173337897, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 129;
        stan::model::assign(female_death_prob, 
                    stan::model::cons_list(stan::model::index_uni(18), stan::model::nil_index_list()), 
                    0.28546191, 
                    "assigning variable female_death_prob");
        current_statement_begin__ = 131;
        stan::math::assign(age_group_index, 2);
        current_statement_begin__ = 132;
        while (as_bool(logical_gte((2 + (get_base1(temp, 1, "temp", 1) / 5)), (age_group_index + 1)))) {
            current_statement_begin__ = 133;
            stan::math::assign(age_group_index, (age_group_index + 1));
        }
        current_statement_begin__ = 136;
        if (as_bool(logical_gt(age_group_index, 18))) {
            current_statement_begin__ = 137;
            stan::math::assign(age_group_index, 18);
        }
        current_statement_begin__ = 140;
        if (as_bool(logical_eq(get_base1(temp, 3, "temp", 1), 0))) {
            current_statement_begin__ = 141;
            stan::math::assign(prob, get_base1(female_death_prob, age_group_index, "female_death_prob", 1));
        } else {
            current_statement_begin__ = 144;
            stan::math::assign(prob, get_base1(male_death_prob, age_group_index, "male_death_prob", 1));
        }
        current_statement_begin__ = 147;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 148;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(32), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 151;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simDeath_not2d_functor__ {
    template <typename T0__, typename T1__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__>::type>
    operator()(const std::vector<T0__>& update,
                   const T1__& rand, std::ostream* pstream__) const {
        return simDeath_not2d(update, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type
smoke_rf(const std::vector<T0__>& update,
             const T1__& constant,
             const T2__& female,
             const T3__& age_diag,
             const T4__& rf_prev_year,
             const T5__& year,
             const T6__& ref_first,
             const T7__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 156;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 157;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 158;
        local_scalar_t__ P_smoke(DUMMY_VAR__);
        (void) P_smoke;  // dummy to suppress unused var warning
        stan::math::initialize(P_smoke, DUMMY_VAR__);
        stan::math::fill(P_smoke, DUMMY_VAR__);
        current_statement_begin__ = 159;
        local_scalar_t__ outcome(DUMMY_VAR__);
        (void) outcome;  // dummy to suppress unused var warning
        stan::math::initialize(outcome, DUMMY_VAR__);
        stan::math::fill(outcome, DUMMY_VAR__);
        current_statement_begin__ = 160;
        stan::math::assign(temp, update);
        current_statement_begin__ = 162;
        stan::math::assign(predictor, (((((constant + (rf_prev_year * get_base1(temp, 8, "temp", 1))) + (year * stan::math::log(get_base1(temp, 7, "temp", 1)))) + (ref_first * get_base1(temp, 39, "temp", 1))) + (female * (logical_eq(get_base1(temp, 3, "temp", 1), 1) ? 1 : 0 ))) + (age_diag * get_base1(temp, 2, "temp", 1))));
        current_statement_begin__ = 164;
        stan::math::assign(P_smoke, (1 / (1 + stan::math::exp(-(predictor)))));
        current_statement_begin__ = 166;
        if (as_bool(logical_gt(P_smoke, rand))) {
            current_statement_begin__ = 167;
            stan::math::assign(outcome, 1);
        } else {
            current_statement_begin__ = 169;
            stan::math::assign(outcome, 0);
        }
        current_statement_begin__ = 171;
        return stan::math::promote_scalar<fun_return_scalar_t__>(outcome);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct smoke_rf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type
    operator()(const std::vector<T0__>& update,
             const T1__& constant,
             const T2__& female,
             const T3__& age_diag,
             const T4__& rf_prev_year,
             const T5__& year,
             const T6__& ref_first,
             const T7__& rand, std::ostream* pstream__) const {
        return smoke_rf(update, constant, female, age_diag, rf_prev_year, year, ref_first, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type
micalb_rf(const std::vector<T0__>& update,
              const T1__& constant,
              const T2__& ro,
              const T3__& female,
              const T4__& age_diag,
              const T5__& smoker,
              const T6__& sbp,
              const T7__& hb1ac,
              const T8__& bmi,
              const T9__& hdl,
              const T10__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 177;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 178;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 179;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 180;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 181;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 182;
        local_scalar_t__ outcome(DUMMY_VAR__);
        (void) outcome;  // dummy to suppress unused var warning
        stan::math::initialize(outcome, DUMMY_VAR__);
        stan::math::fill(outcome, DUMMY_VAR__);
        current_statement_begin__ = 183;
        stan::math::assign(temp, update);
        current_statement_begin__ = 185;
        stan::math::assign(predictor, (((((((constant + (age_diag * get_base1(temp, 2, "temp", 1))) + ((sbp * get_base1(temp, 9, "temp", 1)) / 10)) + (female * get_base1(temp, 3, "temp", 1))) + (hb1ac * get_base1(temp, 10, "temp", 1))) + (smoker * get_base1(temp, 8, "temp", 1))) + (bmi * get_base1(temp, 13, "temp", 1))) + ((10 * hdl) * get_base1(temp, 12, "temp", 1))));
        current_statement_begin__ = 187;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 7, "temp", 1), ro)));
        current_statement_begin__ = 188;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 7, "temp", 1) + 1), ro)));
        current_statement_begin__ = 189;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 191;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 192;
            stan::math::assign(outcome, 1);
        } else {
            current_statement_begin__ = 194;
            stan::math::assign(outcome, 0);
        }
        current_statement_begin__ = 196;
        return stan::math::promote_scalar<fun_return_scalar_t__>(outcome);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct micalb_rf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type
    operator()(const std::vector<T0__>& update,
              const T1__& constant,
              const T2__& ro,
              const T3__& female,
              const T4__& age_diag,
              const T5__& smoker,
              const T6__& sbp,
              const T7__& hb1ac,
              const T8__& bmi,
              const T9__& hdl,
              const T10__& rand, std::ostream* pstream__) const {
        return micalb_rf(update, constant, ro, female, age_diag, smoker, sbp, hb1ac, bmi, hdl, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type
pvd_rf(const std::vector<T0__>& update,
           const T1__& constant,
           const T2__& ro,
           const T3__& age_diag,
           const T4__& smoker,
           const T5__& sbp,
           const T6__& hb1ac,
           const T7__& bmi,
           const T8__& ldl,
           const T9__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 201;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 202;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 203;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 204;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 205;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 206;
        local_scalar_t__ outcome(DUMMY_VAR__);
        (void) outcome;  // dummy to suppress unused var warning
        stan::math::initialize(outcome, DUMMY_VAR__);
        stan::math::fill(outcome, DUMMY_VAR__);
        current_statement_begin__ = 207;
        stan::math::assign(temp, update);
        current_statement_begin__ = 209;
        stan::math::assign(predictor, ((((((constant + (age_diag * get_base1(temp, 2, "temp", 1))) + ((sbp * get_base1(temp, 9, "temp", 1)) / 10)) + (hb1ac * get_base1(temp, 10, "temp", 1))) + (smoker * get_base1(temp, 8, "temp", 1))) + (bmi * get_base1(temp, 13, "temp", 1))) + ((10 * ldl) * get_base1(temp, 11, "temp", 1))));
        current_statement_begin__ = 211;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 7, "temp", 1), ro)));
        current_statement_begin__ = 212;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 7, "temp", 1) + 1), ro)));
        current_statement_begin__ = 213;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 215;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 216;
            stan::math::assign(outcome, 1);
        } else {
            current_statement_begin__ = 218;
            stan::math::assign(outcome, 0);
        }
        current_statement_begin__ = 220;
        return stan::math::promote_scalar<fun_return_scalar_t__>(outcome);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct pvd_rf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type
    operator()(const std::vector<T0__>& update,
           const T1__& constant,
           const T2__& ro,
           const T3__& age_diag,
           const T4__& smoker,
           const T5__& sbp,
           const T6__& hb1ac,
           const T7__& bmi,
           const T8__& ldl,
           const T9__& rand, std::ostream* pstream__) const {
        return pvd_rf(update, constant, ro, age_diag, smoker, sbp, hb1ac, bmi, ldl, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
atfib_rf(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& age_diag,
             const T3__& bmi,
             const T4__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 224;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 225;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 226;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 227;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 228;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 229;
        local_scalar_t__ outcome(DUMMY_VAR__);
        (void) outcome;  // dummy to suppress unused var warning
        stan::math::initialize(outcome, DUMMY_VAR__);
        stan::math::fill(outcome, DUMMY_VAR__);
        current_statement_begin__ = 231;
        stan::math::assign(temp, update);
        current_statement_begin__ = 232;
        stan::math::assign(predictor, ((intercept + (age_diag * get_base1(temp, 2, "temp", 1))) + (bmi * get_base1(temp, 13, "temp", 1))));
        current_statement_begin__ = 233;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 7, "temp", 1)));
        current_statement_begin__ = 234;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 7, "temp", 1) + 1)));
        current_statement_begin__ = 235;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 236;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 237;
            stan::math::assign(outcome, 1);
        } else {
            current_statement_begin__ = 239;
            stan::math::assign(outcome, 0);
        }
        current_statement_begin__ = 241;
        return stan::math::promote_scalar<fun_return_scalar_t__>(outcome);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct atfib_rf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& age_diag,
             const T3__& bmi,
             const T4__& rand, std::ostream* pstream__) const {
        return atfib_rf(update, intercept, age_diag, bmi, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__>::type>::type>::type
efgr60l_binary(const std::vector<T0__>& update,
                   const T1__& constant,
                   const T2__& ro,
                   const T3__& female,
                   const T4__& african,
                   const T5__& asian,
                   const T6__& age_diag,
                   const T7__& sbp,
                   const T8__& bmi,
                   const T9__& hdl,
                   const T10__& ldl,
                   const T11__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 247;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 248;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 249;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 250;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 251;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 252;
        local_scalar_t__ outcome(DUMMY_VAR__);
        (void) outcome;  // dummy to suppress unused var warning
        stan::math::initialize(outcome, DUMMY_VAR__);
        stan::math::fill(outcome, DUMMY_VAR__);
        current_statement_begin__ = 253;
        stan::math::assign(temp, update);
        current_statement_begin__ = 255;
        stan::math::assign(predictor, ((((((((constant + (age_diag * get_base1(temp, 2, "temp", 1))) + ((sbp * get_base1(temp, 9, "temp", 1)) / 10)) + (female * get_base1(temp, 3, "temp", 1))) + ((10 * ldl) * get_base1(temp, 11, "temp", 1))) + (bmi * get_base1(temp, 13, "temp", 1))) + ((10 * hdl) * get_base1(temp, 12, "temp", 1))) + (asian * (logical_eq(get_base1(temp, 4, "temp", 1), 1) ? 1 : 0 ))) + (african * (logical_eq(get_base1(temp, 4, "temp", 1), 2) ? 1 : 0 ))));
        current_statement_begin__ = 258;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 7, "temp", 1), ro)));
        current_statement_begin__ = 259;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 7, "temp", 1) + 1), ro)));
        current_statement_begin__ = 260;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 262;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 263;
            stan::math::assign(outcome, 1);
        } else {
            current_statement_begin__ = 265;
            stan::math::assign(outcome, 0);
        }
        current_statement_begin__ = 267;
        return stan::math::promote_scalar<fun_return_scalar_t__>(outcome);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct efgr60l_binary_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__>::type>::type>::type
    operator()(const std::vector<T0__>& update,
                   const T1__& constant,
                   const T2__& ro,
                   const T3__& female,
                   const T4__& african,
                   const T5__& asian,
                   const T6__& age_diag,
                   const T7__& sbp,
                   const T8__& bmi,
                   const T9__& hdl,
                   const T10__& ldl,
                   const T11__& rand, std::ostream* pstream__) const {
        return efgr60l_binary(update, constant, ro, female, african, asian, age_diag, sbp, bmi, hdl, ldl, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type>
egfr60less_rf(const std::vector<T0__>& update,
                  const T1__& constant,
                  const T2__& ro,
                  const T3__& female,
                  const T4__& african,
                  const T5__& asian,
                  const T6__& egfr,
                  const T7__& egfr_initial,
                  const T8__& year, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 272;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 273;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 274;
        local_scalar_t__ ph1(DUMMY_VAR__);
        (void) ph1;  // dummy to suppress unused var warning
        stan::math::initialize(ph1, DUMMY_VAR__);
        stan::math::fill(ph1, DUMMY_VAR__);
        current_statement_begin__ = 275;
        local_scalar_t__ ph2(DUMMY_VAR__);
        (void) ph2;  // dummy to suppress unused var warning
        stan::math::initialize(ph2, DUMMY_VAR__);
        stan::math::fill(ph2, DUMMY_VAR__);
        current_statement_begin__ = 276;
        local_scalar_t__ PHI1(DUMMY_VAR__);
        (void) PHI1;  // dummy to suppress unused var warning
        stan::math::initialize(PHI1, DUMMY_VAR__);
        stan::math::fill(PHI1, DUMMY_VAR__);
        current_statement_begin__ = 277;
        local_scalar_t__ PHI2(DUMMY_VAR__);
        (void) PHI2;  // dummy to suppress unused var warning
        stan::math::initialize(PHI2, DUMMY_VAR__);
        stan::math::fill(PHI2, DUMMY_VAR__);
        current_statement_begin__ = 278;
        local_scalar_t__ outcome(DUMMY_VAR__);
        (void) outcome;  // dummy to suppress unused var warning
        stan::math::initialize(outcome, DUMMY_VAR__);
        stan::math::fill(outcome, DUMMY_VAR__);
        current_statement_begin__ = 279;
        stan::math::assign(temp, update);
        current_statement_begin__ = 281;
        stan::math::assign(predictor, ((((((constant + (female * get_base1(temp, 3, "temp", 1))) + (african * (logical_eq(get_base1(temp, 4, "temp", 1), 2) ? 1 : 0 ))) + (asian * (logical_eq(get_base1(temp, 4, "temp", 1), 1) ? 1 : 0 ))) + (egfr * get_base1(temp, 15, "temp", 1))) + (egfr_initial * get_base1(temp, 46, "temp", 1))) + (year * stan::math::log(get_base1(temp, 7, "temp", 1)))));
        current_statement_begin__ = 285;
        stan::math::assign(PHI1, Phi((-(predictor) / ro)));
        current_statement_begin__ = 286;
        stan::math::assign(PHI2, Phi(((60 - predictor) / ro)));
        current_statement_begin__ = 287;
        stan::math::assign(ph1, ((1 / stan::math::sqrt((2 * stan::math::pi()))) * stan::math::exp(((-(1) / 2.0) * pow((-(predictor) / ro), 2)))));
        current_statement_begin__ = 288;
        stan::math::assign(ph2, ((1 / stan::math::sqrt((2 * stan::math::pi()))) * stan::math::exp(((-(1) / 2.0) * pow(((60 - predictor) / ro), 2)))));
        current_statement_begin__ = 290;
        stan::math::assign(outcome, (predictor - (ro * ((ph1 - ph2) / (PHI1 - PHI2)))));
        current_statement_begin__ = 291;
        stan::model::assign(temp, 
                    stan::model::cons_list(stan::model::index_uni(15), stan::model::nil_index_list()), 
                    outcome, 
                    "assigning variable temp");
        current_statement_begin__ = 292;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct egfr60less_rf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
                  const T1__& constant,
                  const T2__& ro,
                  const T3__& female,
                  const T4__& african,
                  const T5__& asian,
                  const T6__& egfr,
                  const T7__& egfr_initial,
                  const T8__& year, std::ostream* pstream__) const {
        return egfr60less_rf(update, constant, ro, female, african, asian, egfr, egfr_initial, year, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type>
egfr60more_rf(const std::vector<T0__>& update,
                  const T1__& constant,
                  const T2__& ro,
                  const T3__& female,
                  const T4__& african,
                  const T5__& asian,
                  const T6__& egfr,
                  const T7__& egfr_initial,
                  const T8__& year, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 297;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 298;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 299;
        local_scalar_t__ ph2(DUMMY_VAR__);
        (void) ph2;  // dummy to suppress unused var warning
        stan::math::initialize(ph2, DUMMY_VAR__);
        stan::math::fill(ph2, DUMMY_VAR__);
        current_statement_begin__ = 300;
        local_scalar_t__ PHI2(DUMMY_VAR__);
        (void) PHI2;  // dummy to suppress unused var warning
        stan::math::initialize(PHI2, DUMMY_VAR__);
        stan::math::fill(PHI2, DUMMY_VAR__);
        current_statement_begin__ = 301;
        local_scalar_t__ outcome(DUMMY_VAR__);
        (void) outcome;  // dummy to suppress unused var warning
        stan::math::initialize(outcome, DUMMY_VAR__);
        stan::math::fill(outcome, DUMMY_VAR__);
        current_statement_begin__ = 302;
        stan::math::assign(temp, update);
        current_statement_begin__ = 304;
        stan::math::assign(predictor, ((((((constant + (female * get_base1(temp, 3, "temp", 1))) + (african * (logical_eq(get_base1(temp, 4, "temp", 1), 2) ? 1 : 0 ))) + (asian * (logical_eq(get_base1(temp, 4, "temp", 1), 1) ? 1 : 0 ))) + (egfr * get_base1(temp, 15, "temp", 1))) + (egfr_initial * get_base1(temp, 46, "temp", 1))) + (year * stan::math::log(get_base1(temp, 7, "temp", 1)))));
        current_statement_begin__ = 308;
        stan::math::assign(PHI2, Phi(((60 - predictor) / ro)));
        current_statement_begin__ = 309;
        stan::math::assign(ph2, ((1 / stan::math::sqrt((2 * stan::math::pi()))) * stan::math::exp(((-(1) / 2.0) * pow(((60 - predictor) / ro), 2)))));
        current_statement_begin__ = 311;
        stan::math::assign(outcome, (predictor + (ro * (ph2 / (1 - PHI2)))));
        current_statement_begin__ = 312;
        stan::model::assign(temp, 
                    stan::model::cons_list(stan::model::index_uni(15), stan::model::nil_index_list()), 
                    outcome, 
                    "assigning variable temp");
        current_statement_begin__ = 313;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct egfr60more_rf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
                  const T1__& constant,
                  const T2__& ro,
                  const T3__& female,
                  const T4__& african,
                  const T5__& asian,
                  const T6__& egfr,
                  const T7__& egfr_initial,
                  const T8__& year, std::ostream* pstream__) const {
        return egfr60more_rf(update, constant, ro, female, african, asian, egfr, egfr_initial, year, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
std::vector<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type>
continuous_rf(const int& position_rf,
                  const std::vector<T1__>& update,
                  const T2__& constant,
                  const T3__& female,
                  const T4__& african,
                  const T5__& asian,
                  const T6__& rf_prev_year,
                  const T7__& age_diag,
                  const T8__& ref_first, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 318;
        local_scalar_t__ rf_current_year(DUMMY_VAR__);
        (void) rf_current_year;  // dummy to suppress unused var warning
        stan::math::initialize(rf_current_year, DUMMY_VAR__);
        stan::math::fill(rf_current_year, DUMMY_VAR__);
        current_statement_begin__ = 319;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 320;
        stan::math::assign(temp, update);
        current_statement_begin__ = 322;
        stan::math::assign(rf_current_year, ((((((constant + (rf_prev_year * get_base1(temp, position_rf, "temp", 1))) + (age_diag * stan::math::log(get_base1(temp, 7, "temp", 1)))) + (ref_first * get_base1(temp, (position_rf + 31), "temp", 1))) + (asian * (logical_eq(get_base1(temp, 4, "temp", 1), 1) ? 1 : 0 ))) + (african * (logical_eq(get_base1(temp, 4, "temp", 1), 2) ? 1 : 0 ))) + (female * (logical_eq(get_base1(temp, 3, "temp", 1), 1) ? 1 : 0 ))));
        current_statement_begin__ = 326;
        stan::model::assign(temp, 
                    stan::model::cons_list(stan::model::index_uni(position_rf), stan::model::nil_index_list()), 
                    rf_current_year, 
                    "assigning variable temp");
        current_statement_begin__ = 328;
        if (as_bool(logical_eq(position_rf, 13))) {
            current_statement_begin__ = 329;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                        (rf_current_year * pow(get_base1(temp, 6, "temp", 1), 2)), 
                        "assigning variable temp");
        }
        current_statement_begin__ = 332;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct continuous_rf_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
        std::vector<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type>
    operator()(const int& position_rf,
                  const std::vector<T1__>& update,
                  const T2__& constant,
                  const T3__& female,
                  const T4__& african,
                  const T5__& asian,
                  const T6__& rf_prev_year,
                  const T7__& age_diag,
                  const T8__& ref_first, std::ostream* pstream__) const {
        return continuous_rf(position_rf, update, constant, female, african, asian, rf_prev_year, age_diag, ref_first, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
std::vector<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type>
cholesterol_rf(const int& position_rf,
                   const std::vector<T1__>& update,
                   const T2__& constant,
                   const T3__& female,
                   const T4__& african,
                   const T5__& asian,
                   const T6__& rf_prev_year,
                   const T7__& age_diag,
                   const T8__& ref_first, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 338;
        local_scalar_t__ rf_current_year(DUMMY_VAR__);
        (void) rf_current_year;  // dummy to suppress unused var warning
        stan::math::initialize(rf_current_year, DUMMY_VAR__);
        stan::math::fill(rf_current_year, DUMMY_VAR__);
        current_statement_begin__ = 339;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 340;
        stan::math::assign(temp, update);
        current_statement_begin__ = 342;
        stan::math::assign(rf_current_year, ((((((constant + (rf_prev_year * get_base1(temp, position_rf, "temp", 1))) + (age_diag * stan::math::log(get_base1(temp, 7, "temp", 1)))) + (ref_first * get_base1(temp, (position_rf + 31), "temp", 1))) + (asian * (logical_eq(get_base1(temp, 4, "temp", 1), 1) ? 1 : 0 ))) + (african * (logical_eq(get_base1(temp, 4, "temp", 1), 2) ? 1 : 0 ))) + (female * (logical_eq(get_base1(temp, 3, "temp", 1), 1) ? 1 : 0 ))));
        current_statement_begin__ = 346;
        stan::model::assign(temp, 
                    stan::model::cons_list(stan::model::index_uni(position_rf), stan::model::nil_index_list()), 
                    rf_current_year, 
                    "assigning variable temp");
        current_statement_begin__ = 348;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct cholesterol_rf_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
        std::vector<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type>
    operator()(const int& position_rf,
                   const std::vector<T1__>& update,
                   const T2__& constant,
                   const T3__& female,
                   const T4__& african,
                   const T5__& asian,
                   const T6__& rf_prev_year,
                   const T7__& age_diag,
                   const T8__& ref_first, std::ostream* pstream__) const {
        return cholesterol_rf(position_rf, update, constant, female, african, asian, rf_prev_year, age_diag, ref_first, pstream__);
    }
};
template <typename T0__, typename T1__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__>::type
ro_rng(const T0__& mu,
           const T1__& sigma, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 352;
        local_scalar_t__ p(DUMMY_VAR__);
        (void) p;  // dummy to suppress unused var warning
        stan::math::initialize(p, DUMMY_VAR__);
        stan::math::fill(p, DUMMY_VAR__);
        stan::math::assign(p,normal_cdf(0, mu, sigma));
        current_statement_begin__ = 353;
        local_scalar_t__ u(DUMMY_VAR__);
        (void) u;  // dummy to suppress unused var warning
        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u, DUMMY_VAR__);
        stan::math::assign(u,uniform_rng(p, 1, base_rng__));
        current_statement_begin__ = 354;
        local_scalar_t__ z(DUMMY_VAR__);
        (void) z;  // dummy to suppress unused var warning
        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z, DUMMY_VAR__);
        stan::math::assign(z,inv_Phi(u));
        current_statement_begin__ = 355;
        local_scalar_t__ y(DUMMY_VAR__);
        (void) y;  // dummy to suppress unused var warning
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        stan::math::assign(y,(mu + (sigma * z)));
        current_statement_begin__ = 356;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ro_rng_functor__ {
    template <typename T0__, typename T1__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& mu,
           const T1__& sigma, RNG& base_rng__, std::ostream* pstream__) const {
        return ro_rng(mu, sigma, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type>
simCHF(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ro,
           const T3__& age_diab,
           const T4__& atfib,
           const T5__& bmi,
           const T6__& egfr60l,
           const T7__& ld,
           const T8__& mmalb,
           const T9__& pvd,
           const T10__& amp_hist,
           const T11__& ulcer,
           const T12__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 362;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 363;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 364;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 365;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 366;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 368;
        stan::math::assign(temp, update);
        current_statement_begin__ = 369;
        stan::math::assign(predictor, (((((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (bmi * get_base1(temp, 13, "temp", 1))) + ((10 * ld) * get_base1(temp, 11, "temp", 1))) + (amp_hist * get_base1(temp, 25, "temp", 1))) + (ulcer * get_base1(temp, 24, "temp", 1))) + (atfib * get_base1(temp, 20, "temp", 1))) + ((egfr60l * (logical_lt(get_base1(temp, 15, "temp", 1), 60) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(temp, 15, "temp", 1)) : stan::math::promote_scalar<local_scalar_t__>(0) )) / 10)) + (mmalb * get_base1(temp, 19, "temp", 1))) + (pvd * get_base1(temp, 16, "temp", 1))));
        current_statement_begin__ = 373;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 7, "temp", 1), ro)));
        current_statement_begin__ = 374;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 7, "temp", 1) + 1), ro)));
        current_statement_begin__ = 375;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 376;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 377;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(29), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 378;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(33), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 380;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simCHF_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ro,
           const T3__& age_diab,
           const T4__& atfib,
           const T5__& bmi,
           const T6__& egfr60l,
           const T7__& ld,
           const T8__& mmalb,
           const T9__& pvd,
           const T10__& amp_hist,
           const T11__& ulcer,
           const T12__& rand, std::ostream* pstream__) const {
        return simCHF(update, intercept, ro, age_diab, atfib, bmi, egfr60l, ld, mmalb, pvd, amp_hist, ulcer, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type>
simIHD(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ro,
           const T3__& age_diab,
           const T4__& female,
           const T5__& egfr,
           const T6__& hdl,
           const T7__& ldl,
           const T8__& pvd,
           const T9__& sbp,
           const T10__& amp_hist,
           const T11__& chf,
           const T12__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 386;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 387;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 388;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 389;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 390;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 392;
        stan::math::assign(temp, update);
        current_statement_begin__ = 393;
        stan::math::assign(predictor, (((((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + ((10 * ldl) * get_base1(temp, 11, "temp", 1))) + (amp_hist * get_base1(temp, 25, "temp", 1))) + (chf * get_base1(temp, 29, "temp", 1))) + ((sbp * get_base1(temp, 9, "temp", 1)) / 10)) + ((10 * hdl) * get_base1(temp, 12, "temp", 1))) + (female * get_base1(temp, 3, "temp", 1))) + ((egfr * get_base1(temp, 15, "temp", 1)) / 10)) + (pvd * get_base1(temp, 16, "temp", 1))));
        current_statement_begin__ = 396;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 7, "temp", 1), ro)));
        current_statement_begin__ = 397;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 7, "temp", 1) + 1), ro)));
        current_statement_begin__ = 398;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 399;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 400;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(28), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 401;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(34), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 403;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simIHD_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ro,
           const T3__& age_diab,
           const T4__& female,
           const T5__& egfr,
           const T6__& hdl,
           const T7__& ldl,
           const T8__& pvd,
           const T9__& sbp,
           const T10__& amp_hist,
           const T11__& chf,
           const T12__& rand, std::ostream* pstream__) const {
        return simIHD(update, intercept, ro, age_diab, female, egfr, hdl, ldl, pvd, sbp, amp_hist, chf, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__, typename boost::math::tools::promote_args<T16__, T17__>::type>::type>::type>::type>::type>
simMIm(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& afro,
           const T3__& age_diab,
           const T4__& asian,
           const T5__& hb1ac,
           const T6__& hdl,
           const T7__& ldl,
           const T8__& mmalb,
           const T9__& pvd,
           const T10__& sbp,
           const T11__& smoker,
           const T12__& wbc,
           const T13__& amp,
           const T14__& chf,
           const T15__& ihd,
           const T16__& stroke,
           const T17__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__, typename boost::math::tools::promote_args<T16__, T17__>::type>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 409;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 410;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 411;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 412;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 413;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 415;
        stan::math::assign(temp, update);
        current_statement_begin__ = 416;
        stan::math::assign(predictor, (((((((((((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + ((10 * ldl) * get_base1(temp, 11, "temp", 1))) + (amp * get_base1(temp, 25, "temp", 1))) + (chf * get_base1(temp, 29, "temp", 1))) + (hb1ac * get_base1(temp, 10, "temp", 1))) + ((sbp * get_base1(temp, 9, "temp", 1)) / 10)) + ((10 * hdl) * get_base1(temp, 12, "temp", 1))) + (smoker * get_base1(temp, 8, "temp", 1))) + (ihd * get_base1(temp, 28, "temp", 1))) + (stroke * get_base1(temp, 27, "temp", 1))) + (afro * (logical_eq(get_base1(temp, 4, "temp", 1), 2) ? 1 : 0 ))) + (asian * (logical_eq(get_base1(temp, 4, "temp", 1), 1) ? 1 : 0 ))) + (mmalb * get_base1(temp, 19, "temp", 1))) + (pvd * get_base1(temp, 16, "temp", 1))) + (wbc * get_base1(temp, 14, "temp", 1))));
        current_statement_begin__ = 421;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 7, "temp", 1)));
        current_statement_begin__ = 422;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 7, "temp", 1) + 1)));
        current_statement_begin__ = 423;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 424;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 425;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(21), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 426;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(26), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 427;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(35), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 429;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simMIm_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__, typename boost::math::tools::promote_args<T16__, T17__>::type>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& afro,
           const T3__& age_diab,
           const T4__& asian,
           const T5__& hb1ac,
           const T6__& hdl,
           const T7__& ldl,
           const T8__& mmalb,
           const T9__& pvd,
           const T10__& sbp,
           const T11__& smoker,
           const T12__& wbc,
           const T13__& amp,
           const T14__& chf,
           const T15__& ihd,
           const T16__& stroke,
           const T17__& rand, std::ostream* pstream__) const {
        return simMIm(update, intercept, afro, age_diab, asian, hb1ac, hdl, ldl, mmalb, pvd, sbp, smoker, wbc, amp, chf, ihd, stroke, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__>::type>::type>::type>::type>
simMIf(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ro,
           const T3__& afro,
           const T4__& age_diab,
           const T5__& egfr60l,
           const T6__& hb1ac,
           const T7__& ldl35,
           const T8__& mmalb,
           const T9__& pvd,
           const T10__& sbp,
           const T11__& smoker,
           const T12__& wbc,
           const T13__& chf,
           const T14__& ihd,
           const T15__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 435;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 436;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 437;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 438;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 439;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 441;
        stan::math::assign(temp, update);
        current_statement_begin__ = 442;
        stan::math::assign(predictor, ((((((((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + ((10 * ldl35) * (logical_gt(get_base1(temp, 11, "temp", 1), 3.5) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(temp, 11, "temp", 1)) : stan::math::promote_scalar<local_scalar_t__>(0) ))) + (chf * get_base1(temp, 29, "temp", 1))) + ((sbp * get_base1(temp, 9, "temp", 1)) / 10)) + (hb1ac * get_base1(temp, 10, "temp", 1))) + (smoker * get_base1(temp, 8, "temp", 1))) + (ihd * get_base1(temp, 28, "temp", 1))) + (afro * (logical_eq(get_base1(temp, 4, "temp", 1), 2) ? 1 : 0 ))) + ((egfr60l * (logical_lt(get_base1(temp, 15, "temp", 1), 60) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(temp, 15, "temp", 1)) : stan::math::promote_scalar<local_scalar_t__>(0) )) / 10)) + (mmalb * get_base1(temp, 19, "temp", 1))) + (pvd * get_base1(temp, 16, "temp", 1))) + (wbc * get_base1(temp, 14, "temp", 1))));
        current_statement_begin__ = 447;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 7, "temp", 1), ro)));
        current_statement_begin__ = 448;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 7, "temp", 1) + 1), ro)));
        current_statement_begin__ = 449;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 450;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 451;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(21), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 452;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(26), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 453;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(35), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 455;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simMIf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ro,
           const T3__& afro,
           const T4__& age_diab,
           const T5__& egfr60l,
           const T6__& hb1ac,
           const T7__& ldl35,
           const T8__& mmalb,
           const T9__& pvd,
           const T10__& sbp,
           const T11__& smoker,
           const T12__& wbc,
           const T13__& chf,
           const T14__& ihd,
           const T15__& rand, std::ostream* pstream__) const {
        return simMIf(update, intercept, ro, afro, age_diab, egfr60l, hb1ac, ldl35, mmalb, pvd, sbp, smoker, wbc, chf, ihd, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type>
simMI2(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ldl,
           const T3__& mmalb,
           const T4__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 459;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 460;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 461;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 462;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 463;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 465;
        stan::math::assign(temp, update);
        current_statement_begin__ = 466;
        stan::math::assign(predictor, ((intercept + ((10 * ldl) * get_base1(temp, 11, "temp", 1))) + (mmalb * get_base1(temp, 19, "temp", 1))));
        current_statement_begin__ = 467;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 7, "temp", 1)));
        current_statement_begin__ = 468;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 7, "temp", 1) + 1)));
        current_statement_begin__ = 469;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 470;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 471;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(21), stan::model::nil_index_list()), 
                        2, 
                        "assigning variable temp");
            current_statement_begin__ = 472;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(26), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 473;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(35), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 475;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simMI2_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type>
    operator()(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ldl,
           const T3__& mmalb,
           const T4__& rand, std::ostream* pstream__) const {
        return simMI2(update, intercept, ldl, mmalb, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__>::type>::type>::type>::type>
simStroke(const std::vector<T0__>& update,
              const T1__& intercept,
              const T2__& ro,
              const T3__& age_diab,
              const T4__& female,
              const T5__& atfib,
              const T6__& egfr60l,
              const T7__& hb1ac,
              const T8__& ldl,
              const T9__& mmalb,
              const T10__& sbp,
              const T11__& smoker,
              const T12__& wbc,
              const T13__& amp,
              const T14__& ihd,
              const T15__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 481;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 482;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 483;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 484;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 485;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 487;
        stan::math::assign(temp, update);
        current_statement_begin__ = 488;
        stan::math::assign(predictor, ((((((((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + ((10 * ldl) * get_base1(temp, 11, "temp", 1))) + ((sbp * get_base1(temp, 9, "temp", 1)) / 10)) + (female * get_base1(temp, 3, "temp", 1))) + (hb1ac * get_base1(temp, 10, "temp", 1))) + (smoker * get_base1(temp, 8, "temp", 1))) + (ihd * get_base1(temp, 28, "temp", 1))) + (atfib * get_base1(temp, 20, "temp", 1))) + (amp * get_base1(temp, 25, "temp", 1))) + ((egfr60l * (logical_lt(get_base1(temp, 15, "temp", 1), 60) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(temp, 15, "temp", 1)) : stan::math::promote_scalar<local_scalar_t__>(0) )) / 10)) + (mmalb * get_base1(temp, 19, "temp", 1))) + (wbc * get_base1(temp, 14, "temp", 1))));
        current_statement_begin__ = 493;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 7, "temp", 1), ro)));
        current_statement_begin__ = 494;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 7, "temp", 1) + 1), ro)));
        current_statement_begin__ = 495;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 496;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 497;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(22), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 498;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(27), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 499;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(36), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 501;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simStroke_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
              const T1__& intercept,
              const T2__& ro,
              const T3__& age_diab,
              const T4__& female,
              const T5__& atfib,
              const T6__& egfr60l,
              const T7__& hb1ac,
              const T8__& ldl,
              const T9__& mmalb,
              const T10__& sbp,
              const T11__& smoker,
              const T12__& wbc,
              const T13__& amp,
              const T14__& ihd,
              const T15__& rand, std::ostream* pstream__) const {
        return simStroke(update, intercept, ro, age_diab, female, atfib, egfr60l, hb1ac, ldl, mmalb, sbp, smoker, wbc, amp, ihd, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type>
simStroke2(const std::vector<T0__>& update,
               const T1__& intercept,
               const T2__& ro,
               const T3__& age_diab,
               const T4__& mmalb,
               const T5__& smoker,
               const T6__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 506;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 507;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 508;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 509;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 510;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 512;
        stan::math::assign(temp, update);
        current_statement_begin__ = 513;
        stan::math::assign(predictor, (((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (smoker * get_base1(temp, 8, "temp", 1))) + (mmalb * get_base1(temp, 19, "temp", 1))));
        current_statement_begin__ = 514;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 7, "temp", 1), ro)));
        current_statement_begin__ = 515;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 7, "temp", 1) + 1), ro)));
        current_statement_begin__ = 516;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 517;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 518;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(22), stan::model::nil_index_list()), 
                        2, 
                        "assigning variable temp");
            current_statement_begin__ = 519;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(27), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 520;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(36), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 522;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simStroke2_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type>
    operator()(const std::vector<T0__>& update,
               const T1__& intercept,
               const T2__& ro,
               const T3__& age_diab,
               const T4__& mmalb,
               const T5__& smoker,
               const T6__& rand, std::ostream* pstream__) const {
        return simStroke2(update, intercept, ro, age_diab, mmalb, smoker, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type>
simBlind(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& age_diab,
             const T3__& hb1ac,
             const T4__& hr,
             const T5__& sbp,
             const T6__& wbc,
             const T7__& chf,
             const T8__& ihd,
             const T9__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 527;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 528;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 529;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 530;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 531;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 533;
        stan::math::assign(temp, update);
        current_statement_begin__ = 534;
        stan::math::assign(predictor, (((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (hb1ac * get_base1(temp, 10, "temp", 1))) + ((hr * get_base1(temp, 18, "temp", 1)) / 10)) + (wbc * get_base1(temp, 14, "temp", 1))) + ((sbp * get_base1(temp, 9, "temp", 1)) / 10)) + (chf * get_base1(temp, 29, "temp", 1))) + (ihd * get_base1(temp, 28, "temp", 1))));
        current_statement_begin__ = 537;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 7, "temp", 1)));
        current_statement_begin__ = 538;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 7, "temp", 1) + 1)));
        current_statement_begin__ = 539;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 540;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 541;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(30), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 543;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simBlind_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& age_diab,
             const T3__& hb1ac,
             const T4__& hr,
             const T5__& sbp,
             const T6__& wbc,
             const T7__& chf,
             const T8__& ihd,
             const T9__& rand, std::ostream* pstream__) const {
        return simBlind(update, intercept, age_diab, hb1ac, hr, sbp, wbc, chf, ihd, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type>
simUlcer(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& age_diab,
             const T3__& female,
             const T4__& bmi,
             const T5__& hb1ac,
             const T6__& pvd,
             const T7__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 548;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 549;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 550;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 551;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 553;
        stan::math::assign(temp, update);
        current_statement_begin__ = 554;
        stan::math::assign(predictor, (((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (hb1ac * get_base1(temp, 10, "temp", 1))) + (pvd * get_base1(temp, 16, "temp", 1))) + (bmi * get_base1(temp, 13, "temp", 1))) + (female * get_base1(temp, 3, "temp", 1))));
        current_statement_begin__ = 556;
        stan::math::assign(H1, (stan::math::exp(-(predictor)) / (1 + stan::math::exp(-(predictor)))));
        current_statement_begin__ = 557;
        stan::math::assign(prob, (1 - H1));
        current_statement_begin__ = 558;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 559;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(24), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 561;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simUlcer_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type>
    operator()(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& age_diab,
             const T3__& female,
             const T4__& bmi,
             const T5__& hb1ac,
             const T6__& pvd,
             const T7__& rand, std::ostream* pstream__) const {
        return simUlcer(update, intercept, age_diab, female, bmi, hb1ac, pvd, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__>::type>::type>::type>::type>
simAmp_noUlcer(const std::vector<T0__>& update,
                   const T1__& intercept,
                   const T2__& ro,
                   const T3__& age_diab,
                   const T4__& female,
                   const T5__& atfib,
                   const T6__& hb1ac,
                   const T7__& hdl,
                   const T8__& hr,
                   const T9__& mmalb,
                   const T10__& pvd,
                   const T11__& sbp,
                   const T12__& wbc,
                   const T13__& stroke,
                   const T14__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 567;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 568;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 569;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 570;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 571;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 573;
        stan::math::assign(temp, update);
        current_statement_begin__ = 574;
        stan::math::assign(predictor, (((((((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + ((sbp * get_base1(temp, 9, "temp", 1)) / 10)) + (female * get_base1(temp, 3, "temp", 1))) + (hb1ac * get_base1(temp, 10, "temp", 1))) + (wbc * get_base1(temp, 14, "temp", 1))) + (atfib * get_base1(temp, 20, "temp", 1))) + ((10 * hdl) * get_base1(temp, 12, "temp", 1))) + ((hr * get_base1(temp, 18, "temp", 1)) / 10)) + (mmalb * get_base1(temp, 19, "temp", 1))) + (pvd * get_base1(temp, 16, "temp", 1))) + (stroke * get_base1(temp, 27, "temp", 1))));
        current_statement_begin__ = 578;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 7, "temp", 1), ro)));
        current_statement_begin__ = 579;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 7, "temp", 1) + 1), ro)));
        current_statement_begin__ = 580;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 581;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 582;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(23), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 583;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(25), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 584;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(37), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 586;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simAmp_noUlcer_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
                   const T1__& intercept,
                   const T2__& ro,
                   const T3__& age_diab,
                   const T4__& female,
                   const T5__& atfib,
                   const T6__& hb1ac,
                   const T7__& hdl,
                   const T8__& hr,
                   const T9__& mmalb,
                   const T10__& pvd,
                   const T11__& sbp,
                   const T12__& wbc,
                   const T13__& stroke,
                   const T14__& rand, std::ostream* pstream__) const {
        return simAmp_noUlcer(update, intercept, ro, age_diab, female, atfib, hb1ac, hdl, hr, mmalb, pvd, sbp, wbc, stroke, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type>
simAmp_Ulcer(const std::vector<T0__>& update,
                 const T1__& intercept,
                 const T2__& age_diab,
                 const T3__& pvd,
                 const T4__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 591;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 592;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 593;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 594;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 595;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 597;
        stan::math::assign(temp, update);
        current_statement_begin__ = 598;
        stan::math::assign(predictor, ((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (pvd * get_base1(temp, 16, "temp", 1))));
        current_statement_begin__ = 599;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 7, "temp", 1)));
        current_statement_begin__ = 600;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 7, "temp", 1) + 1)));
        current_statement_begin__ = 601;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 602;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 603;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(23), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 604;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(25), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 605;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(37), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 607;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simAmp_Ulcer_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type>
    operator()(const std::vector<T0__>& update,
                 const T1__& intercept,
                 const T2__& age_diab,
                 const T3__& pvd,
                 const T4__& rand, std::ostream* pstream__) const {
        return simAmp_Ulcer(update, intercept, age_diab, pvd, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
simAmp2(const std::vector<T0__>& update,
            const T1__& intercept,
            const T2__& hb1ac,
            const T3__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 611;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 612;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 613;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 614;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 615;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 617;
        stan::math::assign(temp, update);
        current_statement_begin__ = 618;
        stan::math::assign(predictor, (intercept + (hb1ac * get_base1(temp, 10, "temp", 1))));
        current_statement_begin__ = 619;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 7, "temp", 1)));
        current_statement_begin__ = 620;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 7, "temp", 1) + 1)));
        current_statement_begin__ = 621;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 622;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 623;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(23), stan::model::nil_index_list()), 
                        2, 
                        "assigning variable temp");
            current_statement_begin__ = 624;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(25), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 625;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(37), stan::model::nil_index_list()), 
                        2, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 627;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simAmp2_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const std::vector<T0__>& update,
            const T1__& intercept,
            const T2__& hb1ac,
            const T3__& rand, std::ostream* pstream__) const {
        return simAmp2(update, intercept, hb1ac, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__>::type>::type>::type>::type>
simRenal(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& afro,
             const T3__& age_diab,
             const T4__& female,
             const T5__& bmi,
             const T6__& egfr60l,
             const T7__& egfr60m,
             const T8__& haem,
             const T9__& ldl,
             const T10__& mmalb,
             const T11__& sbp,
             const T12__& wbc,
             const T13__& amp,
             const T14__& blind,
             const T15__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 633;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 634;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 635;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 636;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 637;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 639;
        stan::math::assign(temp, update);
        current_statement_begin__ = 640;
        stan::math::assign(predictor, (((((((((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (bmi * get_base1(temp, 13, "temp", 1))) + ((10 * ldl) * get_base1(temp, 11, "temp", 1))) + (amp * get_base1(temp, 25, "temp", 1))) + (blind * get_base1(temp, 30, "temp", 1))) + ((egfr60l * (logical_lt(get_base1(temp, 15, "temp", 1), 60) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(temp, 15, "temp", 1)) : stan::math::promote_scalar<local_scalar_t__>(0) )) / 10)) + ((egfr60m * (logical_gte(get_base1(temp, 15, "temp", 1), 60) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(temp, 15, "temp", 1)) : stan::math::promote_scalar<local_scalar_t__>(0) )) / 10)) + (female * get_base1(temp, 3, "temp", 1))) + (afro * (logical_eq(get_base1(temp, 4, "temp", 1), 2) ? 1 : 0 ))) + ((sbp * get_base1(temp, 9, "temp", 1)) / 10)) + (haem * get_base1(temp, 17, "temp", 1))) + (mmalb * get_base1(temp, 19, "temp", 1))) + (wbc * get_base1(temp, 14, "temp", 1))));
        current_statement_begin__ = 644;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 7, "temp", 1)));
        current_statement_begin__ = 645;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 7, "temp", 1) + 1)));
        current_statement_begin__ = 646;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 647;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 648;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(31), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 649;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(38), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 651;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simRenal_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& afro,
             const T3__& age_diab,
             const T4__& female,
             const T5__& bmi,
             const T6__& egfr60l,
             const T7__& egfr60m,
             const T8__& haem,
             const T9__& ldl,
             const T10__& mmalb,
             const T11__& sbp,
             const T12__& wbc,
             const T13__& amp,
             const T14__& blind,
             const T15__& rand, std::ostream* pstream__) const {
        return simRenal(update, intercept, afro, age_diab, female, bmi, egfr60l, egfr60m, haem, ldl, mmalb, sbp, wbc, amp, blind, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type>
simDeath_nohist(const std::vector<T0__>& update,
                    const T1__& intercept,
                    const T2__& phi,
                    const T3__& female,
                    const T4__& smoker,
                    const T5__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 656;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 657;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 658;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 659;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 660;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 662;
        stan::math::assign(temp, update);
        current_statement_begin__ = 663;
        stan::math::assign(predictor, ((intercept + (female * get_base1(temp, 3, "temp", 1))) + (smoker * get_base1(temp, 8, "temp", 1))));
        current_statement_begin__ = 664;
        stan::math::assign(H1, ((stan::math::exp(predictor) * (stan::math::exp((phi * get_base1(temp, 1, "temp", 1))) - 1)) / phi));
        current_statement_begin__ = 665;
        stan::math::assign(H2, ((stan::math::exp(predictor) * (stan::math::exp((phi * (get_base1(temp, 1, "temp", 1) + 1))) - 1)) / phi));
        current_statement_begin__ = 666;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 667;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 668;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(32), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 670;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simDeath_nohist_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type>
    operator()(const std::vector<T0__>& update,
                    const T1__& intercept,
                    const T2__& phi,
                    const T3__& female,
                    const T4__& smoker,
                    const T5__& rand, std::ostream* pstream__) const {
        return simDeath_nohist(update, intercept, phi, female, smoker, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__>::type>::type>::type>::type>
simDeath1st(const std::vector<T0__>& update,
                const T1__& intercept,
                const T2__& asian,
                const T3__& year,
                const T4__& age,
                const T5__& hr,
                const T6__& pvd,
                const T7__& smoker,
                const T8__& amp_event,
                const T9__& ihd_event,
                const T10__& mi_event,
                const T11__& renal_event,
                const T12__& stroke_event,
                const T13__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 676;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 677;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 678;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 679;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 681;
        stan::math::assign(temp, update);
        current_statement_begin__ = 682;
        stan::math::assign(predictor, (((((((((((intercept + (year * get_base1(temp, 7, "temp", 1))) + (age * get_base1(temp, 1, "temp", 1))) + (smoker * get_base1(temp, 8, "temp", 1))) + (amp_event * (logical_eq(get_base1(temp, 37, "temp", 1), 1) ? 1 : 0 ))) + (ihd_event * get_base1(temp, 34, "temp", 1))) + (mi_event * get_base1(temp, 35, "temp", 1))) + (asian * (logical_eq(get_base1(temp, 4, "temp", 1), 1) ? 1 : 0 ))) + (pvd * get_base1(temp, 16, "temp", 1))) + (renal_event * get_base1(temp, 38, "temp", 1))) + (stroke_event * get_base1(temp, 36, "temp", 1))) + ((hr * get_base1(temp, 18, "temp", 1)) / 10)));
        current_statement_begin__ = 687;
        stan::math::assign(H1, (stan::math::exp(-(predictor)) / (1 + stan::math::exp(-(predictor)))));
        current_statement_begin__ = 688;
        stan::math::assign(prob, (1 - H1));
        current_statement_begin__ = 689;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 690;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(32), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 692;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simDeath1st_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
                const T1__& intercept,
                const T2__& asian,
                const T3__& year,
                const T4__& age,
                const T5__& hr,
                const T6__& pvd,
                const T7__& smoker,
                const T8__& amp_event,
                const T9__& ihd_event,
                const T10__& mi_event,
                const T11__& renal_event,
                const T12__& stroke_event,
                const T13__& rand, std::ostream* pstream__) const {
        return simDeath1st(update, intercept, asian, year, age, hr, pvd, smoker, amp_event, ihd_event, mi_event, renal_event, stroke_event, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type>
simDeath_hist(const std::vector<T0__>& update,
                  const T1__& intercept,
                  const T2__& phi,
                  const T3__& bm1,
                  const T4__& bm3,
                  const T5__& mmalb,
                  const T6__& smoker,
                  const T7__& wbc,
                  const T8__& amp,
                  const T9__& chf,
                  const T10__& renal,
                  const T11__& stroke,
                  const T12__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 698;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 699;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 700;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 701;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 702;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 704;
        stan::math::assign(temp, update);
        current_statement_begin__ = 705;
        stan::math::assign(predictor, (((((((((intercept + (bm1 * (logical_lt(get_base1(temp, 13, "temp", 1), 18.5) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(temp, 13, "temp", 1)) : stan::math::promote_scalar<local_scalar_t__>(0) ))) + (bm3 * (logical_gt(get_base1(temp, 13, "temp", 1), 25) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(temp, 13, "temp", 1)) : stan::math::promote_scalar<local_scalar_t__>(0) ))) + (smoker * get_base1(temp, 8, "temp", 1))) + (amp * get_base1(temp, 25, "temp", 1))) + (chf * get_base1(temp, 29, "temp", 1))) + (renal * get_base1(temp, 31, "temp", 1))) + (stroke * get_base1(temp, 27, "temp", 1))) + (mmalb * get_base1(temp, 19, "temp", 1))) + (wbc * get_base1(temp, 14, "temp", 1))));
        current_statement_begin__ = 709;
        stan::math::assign(H1, ((stan::math::exp(predictor) * (stan::math::exp((phi * get_base1(temp, 1, "temp", 1))) - 1)) / phi));
        current_statement_begin__ = 710;
        stan::math::assign(H2, ((stan::math::exp(predictor) * (stan::math::exp((phi * (get_base1(temp, 1, "temp", 1) + 1))) - 1)) / phi));
        current_statement_begin__ = 711;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 712;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 713;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(32), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 715;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simDeath_hist_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
                  const T1__& intercept,
                  const T2__& phi,
                  const T3__& bm1,
                  const T4__& bm3,
                  const T5__& mmalb,
                  const T6__& smoker,
                  const T7__& wbc,
                  const T8__& amp,
                  const T9__& chf,
                  const T10__& renal,
                  const T11__& stroke,
                  const T12__& rand, std::ostream* pstream__) const {
        return simDeath_hist(update, intercept, phi, bm1, bm3, mmalb, smoker, wbc, amp, chf, renal, stroke, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__, typename boost::math::tools::promote_args<T16__>::type>::type>::type>::type>::type>
simDeath_sub(const std::vector<T0__>& update,
                 const T1__& intercept,
                 const T2__& atfib,
                 const T3__& age,
                 const T4__& hdl,
                 const T5__& pvd,
                 const T6__& wbc,
                 const T7__& amp_event,
                 const T8__& amp,
                 const T9__& amp_event2,
                 const T10__& ihd_event,
                 const T11__& ihd,
                 const T12__& mi_event,
                 const T13__& mi,
                 const T14__& renal,
                 const T15__& stroke_event,
                 const T16__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__, typename boost::math::tools::promote_args<T16__>::type>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 721;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 722;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 723;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 724;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 726;
        stan::math::assign(temp, update);
        current_statement_begin__ = 727;
        stan::math::assign(predictor, ((((((((((((((intercept + (age * get_base1(temp, 1, "temp", 1))) + ((10 * hdl) * get_base1(temp, 12, "temp", 1))) + (amp_event * (logical_eq(get_base1(temp, 37, "temp", 1), 1) ? 1 : 0 ))) + (amp * get_base1(temp, 25, "temp", 1))) + (ihd_event * get_base1(temp, 34, "temp", 1))) + (amp_event2 * (logical_eq(get_base1(temp, 37, "temp", 1), 2) ? 1 : 0 ))) + (ihd * get_base1(temp, 28, "temp", 1))) + (mi_event * get_base1(temp, 35, "temp", 1))) + (mi * get_base1(temp, 26, "temp", 1))) + (renal * get_base1(temp, 31, "temp", 1))) + (stroke_event * get_base1(temp, 36, "temp", 1))) + (atfib * get_base1(temp, 20, "temp", 1))) + (pvd * get_base1(temp, 16, "temp", 1))) + (wbc * get_base1(temp, 14, "temp", 1))));
        current_statement_begin__ = 732;
        stan::math::assign(H1, (stan::math::exp(-(predictor)) / (1 + stan::math::exp(-(predictor)))));
        current_statement_begin__ = 733;
        stan::math::assign(prob, (1 - H1));
        current_statement_begin__ = 734;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 735;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(32), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 737;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simDeath_sub_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__, typename boost::math::tools::promote_args<T16__>::type>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
                 const T1__& intercept,
                 const T2__& atfib,
                 const T3__& age,
                 const T4__& hdl,
                 const T5__& pvd,
                 const T6__& wbc,
                 const T7__& amp_event,
                 const T8__& amp,
                 const T9__& amp_event2,
                 const T10__& ihd_event,
                 const T11__& ihd,
                 const T12__& mi_event,
                 const T13__& mi,
                 const T14__& renal,
                 const T15__& stroke_event,
                 const T16__& rand, std::ostream* pstream__) const {
        return simDeath_sub(update, intercept, atfib, age, hdl, pvd, wbc, amp_event, amp, amp_event2, ihd_event, ihd, mi_event, mi, renal, stroke_event, rand, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_diabetesnewmodel
  : public stan::model::model_base_crtp<model_diabetesnewmodel> {
private:
        int complicaciones;
        int time;
        int len_his;
        double ag;
        double age_dia;
        double woma;
        double eth;
        double smok;
        double sb;
        double hba1;
        double ld;
        double hd;
        double wbc;
        double haem;
        double hr;
        double weigh;
        double tall;
        double atfib;
        double egfr;
        double micalb;
        double pvd;
        double mii;
        double strok;
        double ih;
        double ch;
        double blin;
        double ampu;
        double rena;
        double ulce;
        double db;
        double bg;
        double tg;
        double diabetes;
        double bmpd;
        double sbpd;
        double hdpd;
        double bm;
        double diab_years;
        double alive;
        double chf_even;
        double ihd_even;
        double mi_even;
        double stro_even;
        double amp_even;
        double renal_even;
        double mii_hist;
        double strok_hist;
        double amp_hist;
public:
    model_diabetesnewmodel(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_diabetesnewmodel(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_diabetesnewmodel_namespace::model_diabetesnewmodel";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 742;
            context__.validate_dims("data initialization", "complicaciones", "int", context__.to_vec());
            complicaciones = int(0);
            vals_i__ = context__.vals_i("complicaciones");
            pos__ = 0;
            complicaciones = vals_i__[pos__++];
            check_greater_or_equal(function__, "complicaciones", complicaciones, 1);
            current_statement_begin__ = 743;
            context__.validate_dims("data initialization", "time", "int", context__.to_vec());
            time = int(0);
            vals_i__ = context__.vals_i("time");
            pos__ = 0;
            time = vals_i__[pos__++];
            check_greater_or_equal(function__, "time", time, 1);
            current_statement_begin__ = 744;
            context__.validate_dims("data initialization", "len_his", "int", context__.to_vec());
            len_his = int(0);
            vals_i__ = context__.vals_i("len_his");
            pos__ = 0;
            len_his = vals_i__[pos__++];
            check_greater_or_equal(function__, "len_his", len_his, 1);
            current_statement_begin__ = 747;
            context__.validate_dims("data initialization", "ag", "double", context__.to_vec());
            ag = double(0);
            vals_r__ = context__.vals_r("ag");
            pos__ = 0;
            ag = vals_r__[pos__++];
            current_statement_begin__ = 748;
            context__.validate_dims("data initialization", "age_dia", "double", context__.to_vec());
            age_dia = double(0);
            vals_r__ = context__.vals_r("age_dia");
            pos__ = 0;
            age_dia = vals_r__[pos__++];
            current_statement_begin__ = 749;
            context__.validate_dims("data initialization", "woma", "double", context__.to_vec());
            woma = double(0);
            vals_r__ = context__.vals_r("woma");
            pos__ = 0;
            woma = vals_r__[pos__++];
            current_statement_begin__ = 750;
            context__.validate_dims("data initialization", "eth", "double", context__.to_vec());
            eth = double(0);
            vals_r__ = context__.vals_r("eth");
            pos__ = 0;
            eth = vals_r__[pos__++];
            current_statement_begin__ = 751;
            context__.validate_dims("data initialization", "smok", "double", context__.to_vec());
            smok = double(0);
            vals_r__ = context__.vals_r("smok");
            pos__ = 0;
            smok = vals_r__[pos__++];
            current_statement_begin__ = 752;
            context__.validate_dims("data initialization", "sb", "double", context__.to_vec());
            sb = double(0);
            vals_r__ = context__.vals_r("sb");
            pos__ = 0;
            sb = vals_r__[pos__++];
            current_statement_begin__ = 753;
            context__.validate_dims("data initialization", "hba1", "double", context__.to_vec());
            hba1 = double(0);
            vals_r__ = context__.vals_r("hba1");
            pos__ = 0;
            hba1 = vals_r__[pos__++];
            current_statement_begin__ = 754;
            context__.validate_dims("data initialization", "ld", "double", context__.to_vec());
            ld = double(0);
            vals_r__ = context__.vals_r("ld");
            pos__ = 0;
            ld = vals_r__[pos__++];
            current_statement_begin__ = 755;
            context__.validate_dims("data initialization", "hd", "double", context__.to_vec());
            hd = double(0);
            vals_r__ = context__.vals_r("hd");
            pos__ = 0;
            hd = vals_r__[pos__++];
            current_statement_begin__ = 756;
            context__.validate_dims("data initialization", "wbc", "double", context__.to_vec());
            wbc = double(0);
            vals_r__ = context__.vals_r("wbc");
            pos__ = 0;
            wbc = vals_r__[pos__++];
            current_statement_begin__ = 757;
            context__.validate_dims("data initialization", "haem", "double", context__.to_vec());
            haem = double(0);
            vals_r__ = context__.vals_r("haem");
            pos__ = 0;
            haem = vals_r__[pos__++];
            current_statement_begin__ = 758;
            context__.validate_dims("data initialization", "hr", "double", context__.to_vec());
            hr = double(0);
            vals_r__ = context__.vals_r("hr");
            pos__ = 0;
            hr = vals_r__[pos__++];
            current_statement_begin__ = 759;
            context__.validate_dims("data initialization", "weigh", "double", context__.to_vec());
            weigh = double(0);
            vals_r__ = context__.vals_r("weigh");
            pos__ = 0;
            weigh = vals_r__[pos__++];
            current_statement_begin__ = 760;
            context__.validate_dims("data initialization", "tall", "double", context__.to_vec());
            tall = double(0);
            vals_r__ = context__.vals_r("tall");
            pos__ = 0;
            tall = vals_r__[pos__++];
            current_statement_begin__ = 761;
            context__.validate_dims("data initialization", "atfib", "double", context__.to_vec());
            atfib = double(0);
            vals_r__ = context__.vals_r("atfib");
            pos__ = 0;
            atfib = vals_r__[pos__++];
            current_statement_begin__ = 762;
            context__.validate_dims("data initialization", "egfr", "double", context__.to_vec());
            egfr = double(0);
            vals_r__ = context__.vals_r("egfr");
            pos__ = 0;
            egfr = vals_r__[pos__++];
            current_statement_begin__ = 763;
            context__.validate_dims("data initialization", "micalb", "double", context__.to_vec());
            micalb = double(0);
            vals_r__ = context__.vals_r("micalb");
            pos__ = 0;
            micalb = vals_r__[pos__++];
            current_statement_begin__ = 764;
            context__.validate_dims("data initialization", "pvd", "double", context__.to_vec());
            pvd = double(0);
            vals_r__ = context__.vals_r("pvd");
            pos__ = 0;
            pvd = vals_r__[pos__++];
            current_statement_begin__ = 765;
            context__.validate_dims("data initialization", "mii", "double", context__.to_vec());
            mii = double(0);
            vals_r__ = context__.vals_r("mii");
            pos__ = 0;
            mii = vals_r__[pos__++];
            current_statement_begin__ = 766;
            context__.validate_dims("data initialization", "strok", "double", context__.to_vec());
            strok = double(0);
            vals_r__ = context__.vals_r("strok");
            pos__ = 0;
            strok = vals_r__[pos__++];
            current_statement_begin__ = 767;
            context__.validate_dims("data initialization", "ih", "double", context__.to_vec());
            ih = double(0);
            vals_r__ = context__.vals_r("ih");
            pos__ = 0;
            ih = vals_r__[pos__++];
            current_statement_begin__ = 768;
            context__.validate_dims("data initialization", "ch", "double", context__.to_vec());
            ch = double(0);
            vals_r__ = context__.vals_r("ch");
            pos__ = 0;
            ch = vals_r__[pos__++];
            current_statement_begin__ = 769;
            context__.validate_dims("data initialization", "blin", "double", context__.to_vec());
            blin = double(0);
            vals_r__ = context__.vals_r("blin");
            pos__ = 0;
            blin = vals_r__[pos__++];
            current_statement_begin__ = 770;
            context__.validate_dims("data initialization", "ampu", "double", context__.to_vec());
            ampu = double(0);
            vals_r__ = context__.vals_r("ampu");
            pos__ = 0;
            ampu = vals_r__[pos__++];
            current_statement_begin__ = 771;
            context__.validate_dims("data initialization", "rena", "double", context__.to_vec());
            rena = double(0);
            vals_r__ = context__.vals_r("rena");
            pos__ = 0;
            rena = vals_r__[pos__++];
            current_statement_begin__ = 772;
            context__.validate_dims("data initialization", "ulce", "double", context__.to_vec());
            ulce = double(0);
            vals_r__ = context__.vals_r("ulce");
            pos__ = 0;
            ulce = vals_r__[pos__++];
            current_statement_begin__ = 773;
            context__.validate_dims("data initialization", "db", "double", context__.to_vec());
            db = double(0);
            vals_r__ = context__.vals_r("db");
            pos__ = 0;
            db = vals_r__[pos__++];
            current_statement_begin__ = 774;
            context__.validate_dims("data initialization", "bg", "double", context__.to_vec());
            bg = double(0);
            vals_r__ = context__.vals_r("bg");
            pos__ = 0;
            bg = vals_r__[pos__++];
            current_statement_begin__ = 775;
            context__.validate_dims("data initialization", "tg", "double", context__.to_vec());
            tg = double(0);
            vals_r__ = context__.vals_r("tg");
            pos__ = 0;
            tg = vals_r__[pos__++];
            current_statement_begin__ = 776;
            context__.validate_dims("data initialization", "diabetes", "double", context__.to_vec());
            diabetes = double(0);
            vals_r__ = context__.vals_r("diabetes");
            pos__ = 0;
            diabetes = vals_r__[pos__++];
            current_statement_begin__ = 777;
            context__.validate_dims("data initialization", "bmpd", "double", context__.to_vec());
            bmpd = double(0);
            vals_r__ = context__.vals_r("bmpd");
            pos__ = 0;
            bmpd = vals_r__[pos__++];
            current_statement_begin__ = 778;
            context__.validate_dims("data initialization", "sbpd", "double", context__.to_vec());
            sbpd = double(0);
            vals_r__ = context__.vals_r("sbpd");
            pos__ = 0;
            sbpd = vals_r__[pos__++];
            current_statement_begin__ = 779;
            context__.validate_dims("data initialization", "hdpd", "double", context__.to_vec());
            hdpd = double(0);
            vals_r__ = context__.vals_r("hdpd");
            pos__ = 0;
            hdpd = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 783;
            bm = double(0);
            stan::math::fill(bm, DUMMY_VAR__);
            current_statement_begin__ = 784;
            diab_years = double(0);
            stan::math::fill(diab_years, DUMMY_VAR__);
            current_statement_begin__ = 785;
            alive = double(0);
            stan::math::fill(alive, DUMMY_VAR__);
            current_statement_begin__ = 786;
            chf_even = double(0);
            stan::math::fill(chf_even, DUMMY_VAR__);
            current_statement_begin__ = 787;
            ihd_even = double(0);
            stan::math::fill(ihd_even, DUMMY_VAR__);
            current_statement_begin__ = 788;
            mi_even = double(0);
            stan::math::fill(mi_even, DUMMY_VAR__);
            current_statement_begin__ = 789;
            stro_even = double(0);
            stan::math::fill(stro_even, DUMMY_VAR__);
            current_statement_begin__ = 790;
            amp_even = double(0);
            stan::math::fill(amp_even, DUMMY_VAR__);
            current_statement_begin__ = 791;
            renal_even = double(0);
            stan::math::fill(renal_even, DUMMY_VAR__);
            current_statement_begin__ = 792;
            mii_hist = double(0);
            stan::math::fill(mii_hist, DUMMY_VAR__);
            current_statement_begin__ = 793;
            strok_hist = double(0);
            stan::math::fill(strok_hist, DUMMY_VAR__);
            current_statement_begin__ = 794;
            amp_hist = double(0);
            stan::math::fill(amp_hist, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 796;
            stan::math::assign(alive, 1);
            current_statement_begin__ = 797;
            stan::math::assign(chf_even, 0);
            current_statement_begin__ = 798;
            stan::math::assign(ihd_even, 0);
            current_statement_begin__ = 799;
            stan::math::assign(mi_even, 0);
            current_statement_begin__ = 800;
            stan::math::assign(stro_even, 0);
            current_statement_begin__ = 801;
            stan::math::assign(amp_even, 0);
            current_statement_begin__ = 802;
            stan::math::assign(renal_even, 0);
            current_statement_begin__ = 804;
            stan::math::assign(bm, (weigh / pow(tall, 2)));
            current_statement_begin__ = 805;
            stan::math::assign(diab_years, (ag - age_dia));
            current_statement_begin__ = 807;
            if (as_bool(logical_neq(strok, 0))) {
                current_statement_begin__ = 808;
                stan::math::assign(strok_hist, 1);
            } else {
                current_statement_begin__ = 811;
                stan::math::assign(strok_hist, 0);
            }
            current_statement_begin__ = 814;
            if (as_bool(logical_neq(mii, 0))) {
                current_statement_begin__ = 815;
                stan::math::assign(mii_hist, 1);
            } else {
                current_statement_begin__ = 818;
                stan::math::assign(mii_hist, 0);
            }
            current_statement_begin__ = 821;
            if (as_bool(logical_neq(ampu, 0))) {
                current_statement_begin__ = 822;
                stan::math::assign(amp_hist, 1);
            } else {
                current_statement_begin__ = 825;
                stan::math::assign(amp_hist, 0);
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_diabetesnewmodel() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mat_temp");
        names__.push_back("mat_temp_wr");
        names__.push_back("order");
        names__.push_back("theta");
        names__.push_back("history");
        names__.push_back("update");
        names__.push_back("output");
        names__.push_back("output_wr");
        names__.push_back("primera");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(time);
        dims__.push_back(len_his);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(time);
        dims__.push_back(len_his);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(complicaciones);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(complicaciones);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_his);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_his);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_his);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_his);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_diabetesnewmodel_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 830;
            validate_non_negative_index("mat_temp", "time", time);
            validate_non_negative_index("mat_temp", "len_his", len_his);
            std::vector<std::vector<double> > mat_temp(time, std::vector<double>(len_his, double(0)));
            stan::math::initialize(mat_temp, DUMMY_VAR__);
            stan::math::fill(mat_temp, DUMMY_VAR__);
            current_statement_begin__ = 831;
            validate_non_negative_index("mat_temp_wr", "time", time);
            validate_non_negative_index("mat_temp_wr", "len_his", len_his);
            std::vector<std::vector<double> > mat_temp_wr(time, std::vector<double>(len_his, double(0)));
            stan::math::initialize(mat_temp_wr, DUMMY_VAR__);
            stan::math::fill(mat_temp_wr, DUMMY_VAR__);
            current_statement_begin__ = 832;
            validate_non_negative_index("order", "complicaciones", complicaciones);
            std::vector<int> order(complicaciones, int(0));
            stan::math::fill(order, std::numeric_limits<int>::min());
            stan::math::assign(order,static_cast<std::vector<int> >(stan::math::array_builder<int >().add(1).add(2).add(3).add(4).add(5).add(6).add(7).add(8).array()));
            current_statement_begin__ = 833;
            validate_non_negative_index("theta", "complicaciones", complicaciones);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta(complicaciones);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(0.125).add(0.125).add(0.125).add(0.125).add(0.125).add(0.125).add(0.125).add(0.125).array())));
            current_statement_begin__ = 834;
            validate_non_negative_index("history", "len_his", len_his);
            std::vector<double> history(len_his, double(0));
            stan::math::initialize(history, DUMMY_VAR__);
            stan::math::fill(history, DUMMY_VAR__);
            current_statement_begin__ = 835;
            validate_non_negative_index("update", "len_his", len_his);
            std::vector<double> update(len_his, double(0));
            stan::math::initialize(update, DUMMY_VAR__);
            stan::math::fill(update, DUMMY_VAR__);
            current_statement_begin__ = 836;
            validate_non_negative_index("output", "len_his", len_his);
            std::vector<double> output(len_his, double(0));
            stan::math::initialize(output, DUMMY_VAR__);
            stan::math::fill(output, DUMMY_VAR__);
            current_statement_begin__ = 837;
            validate_non_negative_index("output_wr", "len_his", len_his);
            std::vector<double> output_wr(len_his, double(0));
            stan::math::initialize(output_wr, DUMMY_VAR__);
            stan::math::fill(output_wr, DUMMY_VAR__);
            current_statement_begin__ = 838;
            double primera;
            (void) primera;  // dummy to suppress unused var warning
            stan::math::initialize(primera, DUMMY_VAR__);
            stan::math::fill(primera, DUMMY_VAR__);
            stan::math::assign(primera,0);
            // generated quantities statements
            current_statement_begin__ = 839;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        ag, 
                        "assigning variable history");
            current_statement_begin__ = 840;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        age_dia, 
                        "assigning variable history");
            current_statement_begin__ = 841;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        woma, 
                        "assigning variable history");
            current_statement_begin__ = 842;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                        eth, 
                        "assigning variable history");
            current_statement_begin__ = 843;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                        weigh, 
                        "assigning variable history");
            current_statement_begin__ = 844;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                        tall, 
                        "assigning variable history");
            current_statement_begin__ = 845;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                        diab_years, 
                        "assigning variable history");
            current_statement_begin__ = 846;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list()), 
                        smok, 
                        "assigning variable history");
            current_statement_begin__ = 847;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list()), 
                        sb, 
                        "assigning variable history");
            current_statement_begin__ = 848;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list()), 
                        hba1, 
                        "assigning variable history");
            current_statement_begin__ = 849;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list()), 
                        ld, 
                        "assigning variable history");
            current_statement_begin__ = 850;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list()), 
                        hd, 
                        "assigning variable history");
            current_statement_begin__ = 851;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(13), stan::model::nil_index_list()), 
                        bm, 
                        "assigning variable history");
            current_statement_begin__ = 852;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(14), stan::model::nil_index_list()), 
                        wbc, 
                        "assigning variable history");
            current_statement_begin__ = 853;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(15), stan::model::nil_index_list()), 
                        egfr, 
                        "assigning variable history");
            current_statement_begin__ = 854;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(16), stan::model::nil_index_list()), 
                        pvd, 
                        "assigning variable history");
            current_statement_begin__ = 855;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(17), stan::model::nil_index_list()), 
                        haem, 
                        "assigning variable history");
            current_statement_begin__ = 856;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(18), stan::model::nil_index_list()), 
                        hr, 
                        "assigning variable history");
            current_statement_begin__ = 857;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(19), stan::model::nil_index_list()), 
                        micalb, 
                        "assigning variable history");
            current_statement_begin__ = 858;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(20), stan::model::nil_index_list()), 
                        atfib, 
                        "assigning variable history");
            current_statement_begin__ = 859;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(21), stan::model::nil_index_list()), 
                        mii, 
                        "assigning variable history");
            current_statement_begin__ = 860;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(22), stan::model::nil_index_list()), 
                        strok, 
                        "assigning variable history");
            current_statement_begin__ = 861;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(23), stan::model::nil_index_list()), 
                        ampu, 
                        "assigning variable history");
            current_statement_begin__ = 862;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(24), stan::model::nil_index_list()), 
                        ulce, 
                        "assigning variable history");
            current_statement_begin__ = 863;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(25), stan::model::nil_index_list()), 
                        amp_hist, 
                        "assigning variable history");
            current_statement_begin__ = 864;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(26), stan::model::nil_index_list()), 
                        mii_hist, 
                        "assigning variable history");
            current_statement_begin__ = 865;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(27), stan::model::nil_index_list()), 
                        strok_hist, 
                        "assigning variable history");
            current_statement_begin__ = 866;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(28), stan::model::nil_index_list()), 
                        ih, 
                        "assigning variable history");
            current_statement_begin__ = 867;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(29), stan::model::nil_index_list()), 
                        ch, 
                        "assigning variable history");
            current_statement_begin__ = 868;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(30), stan::model::nil_index_list()), 
                        blin, 
                        "assigning variable history");
            current_statement_begin__ = 869;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(31), stan::model::nil_index_list()), 
                        rena, 
                        "assigning variable history");
            current_statement_begin__ = 870;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(32), stan::model::nil_index_list()), 
                        alive, 
                        "assigning variable history");
            current_statement_begin__ = 871;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(33), stan::model::nil_index_list()), 
                        chf_even, 
                        "assigning variable history");
            current_statement_begin__ = 872;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(34), stan::model::nil_index_list()), 
                        ihd_even, 
                        "assigning variable history");
            current_statement_begin__ = 873;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(35), stan::model::nil_index_list()), 
                        mi_even, 
                        "assigning variable history");
            current_statement_begin__ = 874;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(36), stan::model::nil_index_list()), 
                        stro_even, 
                        "assigning variable history");
            current_statement_begin__ = 875;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(37), stan::model::nil_index_list()), 
                        amp_even, 
                        "assigning variable history");
            current_statement_begin__ = 876;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(38), stan::model::nil_index_list()), 
                        renal_even, 
                        "assigning variable history");
            current_statement_begin__ = 877;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(39), stan::model::nil_index_list()), 
                        smok, 
                        "assigning variable history");
            current_statement_begin__ = 878;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(40), stan::model::nil_index_list()), 
                        sb, 
                        "assigning variable history");
            current_statement_begin__ = 879;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(41), stan::model::nil_index_list()), 
                        hba1, 
                        "assigning variable history");
            current_statement_begin__ = 880;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(42), stan::model::nil_index_list()), 
                        ld, 
                        "assigning variable history");
            current_statement_begin__ = 881;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(43), stan::model::nil_index_list()), 
                        hd, 
                        "assigning variable history");
            current_statement_begin__ = 882;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(44), stan::model::nil_index_list()), 
                        bm, 
                        "assigning variable history");
            current_statement_begin__ = 883;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(45), stan::model::nil_index_list()), 
                        wbc, 
                        "assigning variable history");
            current_statement_begin__ = 884;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(46), stan::model::nil_index_list()), 
                        egfr, 
                        "assigning variable history");
            current_statement_begin__ = 885;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(47), stan::model::nil_index_list()), 
                        pvd, 
                        "assigning variable history");
            current_statement_begin__ = 886;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(48), stan::model::nil_index_list()), 
                        haem, 
                        "assigning variable history");
            current_statement_begin__ = 887;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(49), stan::model::nil_index_list()), 
                        hr, 
                        "assigning variable history");
            current_statement_begin__ = 888;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(50), stan::model::nil_index_list()), 
                        micalb, 
                        "assigning variable history");
            current_statement_begin__ = 889;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(51), stan::model::nil_index_list()), 
                        atfib, 
                        "assigning variable history");
            current_statement_begin__ = 890;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(52), stan::model::nil_index_list()), 
                        diabetes, 
                        "assigning variable history");
            current_statement_begin__ = 891;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(53), stan::model::nil_index_list()), 
                        db, 
                        "assigning variable history");
            current_statement_begin__ = 892;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(54), stan::model::nil_index_list()), 
                        bg, 
                        "assigning variable history");
            current_statement_begin__ = 893;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(55), stan::model::nil_index_list()), 
                        tg, 
                        "assigning variable history");
            current_statement_begin__ = 894;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(56), stan::model::nil_index_list()), 
                        bmpd, 
                        "assigning variable history");
            current_statement_begin__ = 895;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(57), stan::model::nil_index_list()), 
                        sbpd, 
                        "assigning variable history");
            current_statement_begin__ = 896;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(58), stan::model::nil_index_list()), 
                        hdpd, 
                        "assigning variable history");
            current_statement_begin__ = 898;
            for (int m = 1; m <= 2; ++m) {
                current_statement_begin__ = 899;
                stan::math::assign(update, history);
                current_statement_begin__ = 901;
                for (int i = 1; i <= time; ++i) {
                    current_statement_begin__ = 902;
                    if (as_bool(logical_eq(get_base1(update, 32, "update", 1), 0))) {
                        current_statement_begin__ = 903;
                        break;
                    } else {
                        current_statement_begin__ = 906;
                        if (as_bool((primitive_value(logical_eq(m, 1)) && primitive_value(logical_lt(i, 3))))) {
                            current_statement_begin__ = 907;
                            stan::math::assign(update, weightRedux_rng(update, base_rng__, pstream__));
                        }
                        current_statement_begin__ = 909;
                        if (as_bool(logical_eq(get_base1(update, 52, "update", 1), 0))) {
                            {
                            current_statement_begin__ = 910;
                            local_scalar_t__ intercept(DUMMY_VAR__);
                            (void) intercept;  // dummy to suppress unused var warning
                            stan::math::initialize(intercept, DUMMY_VAR__);
                            stan::math::fill(intercept, DUMMY_VAR__);
                            current_statement_begin__ = 911;
                            local_scalar_t__ age(DUMMY_VAR__);
                            (void) age;  // dummy to suppress unused var warning
                            stan::math::initialize(age, DUMMY_VAR__);
                            stan::math::fill(age, DUMMY_VAR__);
                            current_statement_begin__ = 912;
                            local_scalar_t__ bmi(DUMMY_VAR__);
                            (void) bmi;  // dummy to suppress unused var warning
                            stan::math::initialize(bmi, DUMMY_VAR__);
                            stan::math::fill(bmi, DUMMY_VAR__);
                            current_statement_begin__ = 913;
                            local_scalar_t__ sbp(DUMMY_VAR__);
                            (void) sbp;  // dummy to suppress unused var warning
                            stan::math::initialize(sbp, DUMMY_VAR__);
                            stan::math::fill(sbp, DUMMY_VAR__);
                            current_statement_begin__ = 914;
                            local_scalar_t__ dbp(DUMMY_VAR__);
                            (void) dbp;  // dummy to suppress unused var warning
                            stan::math::initialize(dbp, DUMMY_VAR__);
                            stan::math::fill(dbp, DUMMY_VAR__);
                            current_statement_begin__ = 915;
                            local_scalar_t__ bgl(DUMMY_VAR__);
                            (void) bgl;  // dummy to suppress unused var warning
                            stan::math::initialize(bgl, DUMMY_VAR__);
                            stan::math::fill(bgl, DUMMY_VAR__);
                            current_statement_begin__ = 916;
                            local_scalar_t__ hdl(DUMMY_VAR__);
                            (void) hdl;  // dummy to suppress unused var warning
                            stan::math::initialize(hdl, DUMMY_VAR__);
                            stan::math::fill(hdl, DUMMY_VAR__);
                            current_statement_begin__ = 917;
                            local_scalar_t__ trig(DUMMY_VAR__);
                            (void) trig;  // dummy to suppress unused var warning
                            stan::math::initialize(trig, DUMMY_VAR__);
                            stan::math::fill(trig, DUMMY_VAR__);
                            current_statement_begin__ = 918;
                            local_scalar_t__ female(DUMMY_VAR__);
                            (void) female;  // dummy to suppress unused var warning
                            stan::math::initialize(female, DUMMY_VAR__);
                            stan::math::fill(female, DUMMY_VAR__);
                            current_statement_begin__ = 919;
                            local_scalar_t__ ethni(DUMMY_VAR__);
                            (void) ethni;  // dummy to suppress unused var warning
                            stan::math::initialize(ethni, DUMMY_VAR__);
                            stan::math::fill(ethni, DUMMY_VAR__);
                            current_statement_begin__ = 920;
                            local_scalar_t__ rand(DUMMY_VAR__);
                            (void) rand;  // dummy to suppress unused var warning
                            stan::math::initialize(rand, DUMMY_VAR__);
                            stan::math::fill(rand, DUMMY_VAR__);
                            current_statement_begin__ = 921;
                            local_scalar_t__ rand2(DUMMY_VAR__);
                            (void) rand2;  // dummy to suppress unused var warning
                            stan::math::initialize(rand2, DUMMY_VAR__);
                            stan::math::fill(rand2, DUMMY_VAR__);
                            current_statement_begin__ = 923;
                            stan::math::assign(intercept, -(8.464));
                            current_statement_begin__ = 924;
                            stan::math::assign(age, normal_rng(-(0.014), 0.004, base_rng__));
                            current_statement_begin__ = 925;
                            stan::math::assign(bmi, normal_rng(0.053, 0.005, base_rng__));
                            current_statement_begin__ = 926;
                            stan::math::assign(sbp, normal_rng(0.006, 0.002, base_rng__));
                            current_statement_begin__ = 927;
                            stan::math::assign(dbp, normal_rng(0.003, 0.004, base_rng__));
                            current_statement_begin__ = 928;
                            stan::math::assign(bgl, normal_rng(0.062, 0.002, base_rng__));
                            current_statement_begin__ = 929;
                            stan::math::assign(hdl, normal_rng(-(0.018), 0.002, base_rng__));
                            current_statement_begin__ = 930;
                            stan::math::assign(trig, normal_rng(0.001, 0.00025, base_rng__));
                            current_statement_begin__ = 931;
                            stan::math::assign(female, normal_rng(-(0.084), 0.066, base_rng__));
                            current_statement_begin__ = 932;
                            stan::math::assign(ethni, normal_rng(-(0.466), 0.062, base_rng__));
                            current_statement_begin__ = 933;
                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                            current_statement_begin__ = 934;
                            stan::math::assign(update, simDiabetes(update, intercept, age, bmi, sbp, dbp, bgl, hdl, trig, female, ethni, rand, pstream__));
                            current_statement_begin__ = 937;
                            stan::math::assign(rand2, uniform_rng(0, 1, base_rng__));
                            current_statement_begin__ = 938;
                            stan::math::assign(update, simDeath_not2d(update, rand2, pstream__));
                            }
                        } else {
                            current_statement_begin__ = 942;
                            for (int j = 1; j <= complicaciones; ++j) {
                                {
                                current_statement_begin__ = 943;
                                int temp(0);
                                (void) temp;  // dummy to suppress unused var warning
                                stan::math::fill(temp, std::numeric_limits<int>::min());
                                current_statement_begin__ = 944;
                                int k(0);
                                (void) k;  // dummy to suppress unused var warning
                                stan::math::fill(k, std::numeric_limits<int>::min());
                                current_statement_begin__ = 945;
                                stan::math::assign(k, categorical_rng(theta, base_rng__));
                                current_statement_begin__ = 946;
                                stan::math::assign(temp, get_base1(order, j, "order", 1));
                                current_statement_begin__ = 947;
                                stan::model::assign(order, 
                                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                            get_base1(order, k, "order", 1), 
                                            "assigning variable order");
                                current_statement_begin__ = 948;
                                stan::model::assign(order, 
                                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                            temp, 
                                            "assigning variable order");
                                }
                            }
                            current_statement_begin__ = 950;
                            for (int s = 1; s <= complicaciones; ++s) {
                                current_statement_begin__ = 952;
                                if (as_bool(logical_eq(get_base1(order, s, "order", 1), 1))) {
                                    current_statement_begin__ = 953;
                                    if (as_bool(logical_neq(get_base1(update, 29, "update", 1), 1))) {
                                        {
                                        current_statement_begin__ = 954;
                                        local_scalar_t__ intercept(DUMMY_VAR__);
                                        (void) intercept;  // dummy to suppress unused var warning
                                        stan::math::initialize(intercept, DUMMY_VAR__);
                                        stan::math::fill(intercept, DUMMY_VAR__);
                                        current_statement_begin__ = 955;
                                        local_scalar_t__ ro(DUMMY_VAR__);
                                        (void) ro;  // dummy to suppress unused var warning
                                        stan::math::initialize(ro, DUMMY_VAR__);
                                        stan::math::fill(ro, DUMMY_VAR__);
                                        current_statement_begin__ = 956;
                                        local_scalar_t__ age_diab(DUMMY_VAR__);
                                        (void) age_diab;  // dummy to suppress unused var warning
                                        stan::math::initialize(age_diab, DUMMY_VAR__);
                                        stan::math::fill(age_diab, DUMMY_VAR__);
                                        current_statement_begin__ = 957;
                                        local_scalar_t__ bmi(DUMMY_VAR__);
                                        (void) bmi;  // dummy to suppress unused var warning
                                        stan::math::initialize(bmi, DUMMY_VAR__);
                                        stan::math::fill(bmi, DUMMY_VAR__);
                                        current_statement_begin__ = 958;
                                        local_scalar_t__ ldl(DUMMY_VAR__);
                                        (void) ldl;  // dummy to suppress unused var warning
                                        stan::math::initialize(ldl, DUMMY_VAR__);
                                        stan::math::fill(ldl, DUMMY_VAR__);
                                        current_statement_begin__ = 959;
                                        local_scalar_t__ amp(DUMMY_VAR__);
                                        (void) amp;  // dummy to suppress unused var warning
                                        stan::math::initialize(amp, DUMMY_VAR__);
                                        stan::math::fill(amp, DUMMY_VAR__);
                                        current_statement_begin__ = 960;
                                        local_scalar_t__ ulcer(DUMMY_VAR__);
                                        (void) ulcer;  // dummy to suppress unused var warning
                                        stan::math::initialize(ulcer, DUMMY_VAR__);
                                        stan::math::fill(ulcer, DUMMY_VAR__);
                                        current_statement_begin__ = 961;
                                        local_scalar_t__ atfi(DUMMY_VAR__);
                                        (void) atfi;  // dummy to suppress unused var warning
                                        stan::math::initialize(atfi, DUMMY_VAR__);
                                        stan::math::fill(atfi, DUMMY_VAR__);
                                        current_statement_begin__ = 962;
                                        local_scalar_t__ egf60l(DUMMY_VAR__);
                                        (void) egf60l;  // dummy to suppress unused var warning
                                        stan::math::initialize(egf60l, DUMMY_VAR__);
                                        stan::math::fill(egf60l, DUMMY_VAR__);
                                        current_statement_begin__ = 963;
                                        local_scalar_t__ mmalb(DUMMY_VAR__);
                                        (void) mmalb;  // dummy to suppress unused var warning
                                        stan::math::initialize(mmalb, DUMMY_VAR__);
                                        stan::math::fill(mmalb, DUMMY_VAR__);
                                        current_statement_begin__ = 964;
                                        local_scalar_t__ pv(DUMMY_VAR__);
                                        (void) pv;  // dummy to suppress unused var warning
                                        stan::math::initialize(pv, DUMMY_VAR__);
                                        stan::math::fill(pv, DUMMY_VAR__);
                                        current_statement_begin__ = 965;
                                        local_scalar_t__ rand(DUMMY_VAR__);
                                        (void) rand;  // dummy to suppress unused var warning
                                        stan::math::initialize(rand, DUMMY_VAR__);
                                        stan::math::fill(rand, DUMMY_VAR__);
                                        current_statement_begin__ = 966;
                                        stan::math::assign(intercept, normal_rng(-(12.332), 0.859, base_rng__));
                                        current_statement_begin__ = 967;
                                        stan::math::assign(ro, ro_rng(1.514, 0.096, base_rng__, pstream__));
                                        current_statement_begin__ = 968;
                                        stan::math::assign(age_diab, normal_rng(0.068, 0.008, base_rng__));
                                        current_statement_begin__ = 969;
                                        stan::math::assign(bmi, normal_rng(0.072, 0.008, base_rng__));
                                        current_statement_begin__ = 970;
                                        stan::math::assign(ldl, normal_rng(0.012, 0.005, base_rng__));
                                        current_statement_begin__ = 971;
                                        stan::math::assign(amp, normal_rng(0.658, 0.334, base_rng__));
                                        current_statement_begin__ = 972;
                                        stan::math::assign(ulcer, normal_rng(0.654, 0.291, base_rng__));
                                        current_statement_begin__ = 973;
                                        stan::math::assign(atfi, normal_rng(1.562, 0.245, base_rng__));
                                        current_statement_begin__ = 974;
                                        stan::math::assign(egf60l, normal_rng(-(0.22), 0.065, base_rng__));
                                        current_statement_begin__ = 975;
                                        stan::math::assign(mmalb, normal_rng(0.771, 0.116, base_rng__));
                                        current_statement_begin__ = 976;
                                        stan::math::assign(pv, normal_rng(0.479, 0.136, base_rng__));
                                        current_statement_begin__ = 977;
                                        stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                        current_statement_begin__ = 978;
                                        stan::math::assign(update, simCHF(update, intercept, ro, age_diab, atfi, bmi, egf60l, ldl, mmalb, pv, amp, ulcer, rand, pstream__));
                                        }
                                    }
                                } else if (as_bool(logical_eq(get_base1(order, s, "order", 1), 2))) {
                                    current_statement_begin__ = 983;
                                    if (as_bool(logical_neq(get_base1(update, 28, "update", 1), 1))) {
                                        {
                                        current_statement_begin__ = 984;
                                        local_scalar_t__ intercept(DUMMY_VAR__);
                                        (void) intercept;  // dummy to suppress unused var warning
                                        stan::math::initialize(intercept, DUMMY_VAR__);
                                        stan::math::fill(intercept, DUMMY_VAR__);
                                        current_statement_begin__ = 985;
                                        local_scalar_t__ ro(DUMMY_VAR__);
                                        (void) ro;  // dummy to suppress unused var warning
                                        stan::math::initialize(ro, DUMMY_VAR__);
                                        stan::math::fill(ro, DUMMY_VAR__);
                                        current_statement_begin__ = 986;
                                        local_scalar_t__ age_diab(DUMMY_VAR__);
                                        (void) age_diab;  // dummy to suppress unused var warning
                                        stan::math::initialize(age_diab, DUMMY_VAR__);
                                        stan::math::fill(age_diab, DUMMY_VAR__);
                                        current_statement_begin__ = 987;
                                        local_scalar_t__ chf(DUMMY_VAR__);
                                        (void) chf;  // dummy to suppress unused var warning
                                        stan::math::initialize(chf, DUMMY_VAR__);
                                        stan::math::fill(chf, DUMMY_VAR__);
                                        current_statement_begin__ = 988;
                                        local_scalar_t__ ldl(DUMMY_VAR__);
                                        (void) ldl;  // dummy to suppress unused var warning
                                        stan::math::initialize(ldl, DUMMY_VAR__);
                                        stan::math::fill(ldl, DUMMY_VAR__);
                                        current_statement_begin__ = 989;
                                        local_scalar_t__ amp(DUMMY_VAR__);
                                        (void) amp;  // dummy to suppress unused var warning
                                        stan::math::initialize(amp, DUMMY_VAR__);
                                        stan::math::fill(amp, DUMMY_VAR__);
                                        current_statement_begin__ = 990;
                                        local_scalar_t__ sbp(DUMMY_VAR__);
                                        (void) sbp;  // dummy to suppress unused var warning
                                        stan::math::initialize(sbp, DUMMY_VAR__);
                                        stan::math::fill(sbp, DUMMY_VAR__);
                                        current_statement_begin__ = 991;
                                        local_scalar_t__ hdl(DUMMY_VAR__);
                                        (void) hdl;  // dummy to suppress unused var warning
                                        stan::math::initialize(hdl, DUMMY_VAR__);
                                        stan::math::fill(hdl, DUMMY_VAR__);
                                        current_statement_begin__ = 992;
                                        local_scalar_t__ female(DUMMY_VAR__);
                                        (void) female;  // dummy to suppress unused var warning
                                        stan::math::initialize(female, DUMMY_VAR__);
                                        stan::math::fill(female, DUMMY_VAR__);
                                        current_statement_begin__ = 993;
                                        local_scalar_t__ efgr(DUMMY_VAR__);
                                        (void) efgr;  // dummy to suppress unused var warning
                                        stan::math::initialize(efgr, DUMMY_VAR__);
                                        stan::math::fill(efgr, DUMMY_VAR__);
                                        current_statement_begin__ = 994;
                                        local_scalar_t__ pv(DUMMY_VAR__);
                                        (void) pv;  // dummy to suppress unused var warning
                                        stan::math::initialize(pv, DUMMY_VAR__);
                                        stan::math::fill(pv, DUMMY_VAR__);
                                        current_statement_begin__ = 995;
                                        local_scalar_t__ rand(DUMMY_VAR__);
                                        (void) rand;  // dummy to suppress unused var warning
                                        stan::math::initialize(rand, DUMMY_VAR__);
                                        stan::math::fill(rand, DUMMY_VAR__);
                                        current_statement_begin__ = 996;
                                        stan::math::assign(intercept, normal_rng(-(6.709), 0.503, base_rng__));
                                        current_statement_begin__ = 997;
                                        stan::math::assign(ro, ro_rng(1.276, 0.059, base_rng__, pstream__));
                                        current_statement_begin__ = 998;
                                        stan::math::assign(age_diab, normal_rng(0.016, 0.005, base_rng__));
                                        current_statement_begin__ = 999;
                                        stan::math::assign(ldl, normal_rng(0.023, 0.003, base_rng__));
                                        current_statement_begin__ = 1000;
                                        stan::math::assign(amp, normal_rng(0.526, 0.266, base_rng__));
                                        current_statement_begin__ = 1001;
                                        stan::math::assign(chf, normal_rng(0.824, 0.168, base_rng__));
                                        current_statement_begin__ = 1002;
                                        stan::math::assign(sbp, normal_rng(0.058, 0.019, base_rng__));
                                        current_statement_begin__ = 1003;
                                        stan::math::assign(hdl, normal_rng(-(0.065), 0.014, base_rng__));
                                        current_statement_begin__ = 1004;
                                        stan::math::assign(female, normal_rng(-(0.532), 0.085, base_rng__));
                                        current_statement_begin__ = 1005;
                                        stan::math::assign(efgr, normal_rng(-(0.053), 0.023, base_rng__));
                                        current_statement_begin__ = 1006;
                                        stan::math::assign(pv, normal_rng(0.486, 0.181, base_rng__));
                                        current_statement_begin__ = 1007;
                                        stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                        current_statement_begin__ = 1008;
                                        stan::math::assign(update, simIHD(update, intercept, ro, age_diab, female, efgr, hdl, ldl, pv, sbp, amp, chf, rand, pstream__));
                                        }
                                    }
                                } else if (as_bool(logical_eq(get_base1(order, s, "order", 1), 3))) {
                                    current_statement_begin__ = 1013;
                                    if (as_bool(logical_eq(get_base1(update, 26, "update", 1), 0))) {
                                        current_statement_begin__ = 1014;
                                        if (as_bool(logical_eq(get_base1(update, 3, "update", 1), 0))) {
                                            {
                                            current_statement_begin__ = 1015;
                                            local_scalar_t__ intercept(DUMMY_VAR__);
                                            (void) intercept;  // dummy to suppress unused var warning
                                            stan::math::initialize(intercept, DUMMY_VAR__);
                                            stan::math::fill(intercept, DUMMY_VAR__);
                                            current_statement_begin__ = 1016;
                                            local_scalar_t__ age_diab(DUMMY_VAR__);
                                            (void) age_diab;  // dummy to suppress unused var warning
                                            stan::math::initialize(age_diab, DUMMY_VAR__);
                                            stan::math::fill(age_diab, DUMMY_VAR__);
                                            current_statement_begin__ = 1017;
                                            local_scalar_t__ chf(DUMMY_VAR__);
                                            (void) chf;  // dummy to suppress unused var warning
                                            stan::math::initialize(chf, DUMMY_VAR__);
                                            stan::math::fill(chf, DUMMY_VAR__);
                                            current_statement_begin__ = 1018;
                                            local_scalar_t__ ldl(DUMMY_VAR__);
                                            (void) ldl;  // dummy to suppress unused var warning
                                            stan::math::initialize(ldl, DUMMY_VAR__);
                                            stan::math::fill(ldl, DUMMY_VAR__);
                                            current_statement_begin__ = 1019;
                                            local_scalar_t__ amp(DUMMY_VAR__);
                                            (void) amp;  // dummy to suppress unused var warning
                                            stan::math::initialize(amp, DUMMY_VAR__);
                                            stan::math::fill(amp, DUMMY_VAR__);
                                            current_statement_begin__ = 1020;
                                            local_scalar_t__ hba1c(DUMMY_VAR__);
                                            (void) hba1c;  // dummy to suppress unused var warning
                                            stan::math::initialize(hba1c, DUMMY_VAR__);
                                            stan::math::fill(hba1c, DUMMY_VAR__);
                                            current_statement_begin__ = 1021;
                                            local_scalar_t__ sbp(DUMMY_VAR__);
                                            (void) sbp;  // dummy to suppress unused var warning
                                            stan::math::initialize(sbp, DUMMY_VAR__);
                                            stan::math::fill(sbp, DUMMY_VAR__);
                                            current_statement_begin__ = 1022;
                                            local_scalar_t__ ihd(DUMMY_VAR__);
                                            (void) ihd;  // dummy to suppress unused var warning
                                            stan::math::initialize(ihd, DUMMY_VAR__);
                                            stan::math::fill(ihd, DUMMY_VAR__);
                                            current_statement_begin__ = 1023;
                                            local_scalar_t__ hdl(DUMMY_VAR__);
                                            (void) hdl;  // dummy to suppress unused var warning
                                            stan::math::initialize(hdl, DUMMY_VAR__);
                                            stan::math::fill(hdl, DUMMY_VAR__);
                                            current_statement_begin__ = 1024;
                                            local_scalar_t__ smoker(DUMMY_VAR__);
                                            (void) smoker;  // dummy to suppress unused var warning
                                            stan::math::initialize(smoker, DUMMY_VAR__);
                                            stan::math::fill(smoker, DUMMY_VAR__);
                                            current_statement_begin__ = 1025;
                                            local_scalar_t__ stroke(DUMMY_VAR__);
                                            (void) stroke;  // dummy to suppress unused var warning
                                            stan::math::initialize(stroke, DUMMY_VAR__);
                                            stan::math::fill(stroke, DUMMY_VAR__);
                                            current_statement_begin__ = 1026;
                                            local_scalar_t__ afro(DUMMY_VAR__);
                                            (void) afro;  // dummy to suppress unused var warning
                                            stan::math::initialize(afro, DUMMY_VAR__);
                                            stan::math::fill(afro, DUMMY_VAR__);
                                            current_statement_begin__ = 1027;
                                            local_scalar_t__ asian(DUMMY_VAR__);
                                            (void) asian;  // dummy to suppress unused var warning
                                            stan::math::initialize(asian, DUMMY_VAR__);
                                            stan::math::fill(asian, DUMMY_VAR__);
                                            current_statement_begin__ = 1028;
                                            local_scalar_t__ mmalb(DUMMY_VAR__);
                                            (void) mmalb;  // dummy to suppress unused var warning
                                            stan::math::initialize(mmalb, DUMMY_VAR__);
                                            stan::math::fill(mmalb, DUMMY_VAR__);
                                            current_statement_begin__ = 1029;
                                            local_scalar_t__ pv(DUMMY_VAR__);
                                            (void) pv;  // dummy to suppress unused var warning
                                            stan::math::initialize(pv, DUMMY_VAR__);
                                            stan::math::fill(pv, DUMMY_VAR__);
                                            current_statement_begin__ = 1030;
                                            local_scalar_t__ wb(DUMMY_VAR__);
                                            (void) wb;  // dummy to suppress unused var warning
                                            stan::math::initialize(wb, DUMMY_VAR__);
                                            stan::math::fill(wb, DUMMY_VAR__);
                                            current_statement_begin__ = 1031;
                                            local_scalar_t__ rand(DUMMY_VAR__);
                                            (void) rand;  // dummy to suppress unused var warning
                                            stan::math::initialize(rand, DUMMY_VAR__);
                                            stan::math::fill(rand, DUMMY_VAR__);
                                            current_statement_begin__ = 1032;
                                            stan::math::assign(intercept, normal_rng(-(8.791), 0.486, base_rng__));
                                            current_statement_begin__ = 1033;
                                            stan::math::assign(afro, normal_rng(-(0.830), 0.237, base_rng__));
                                            current_statement_begin__ = 1034;
                                            stan::math::assign(asian, normal_rng(0.279, 0.126, base_rng__));
                                            current_statement_begin__ = 1035;
                                            stan::math::assign(hba1c, normal_rng(0.108, 0.023, base_rng__));
                                            current_statement_begin__ = 1036;
                                            stan::math::assign(age_diab, normal_rng(0.045, 0.006, base_rng__));
                                            current_statement_begin__ = 1037;
                                            stan::math::assign(ldl, normal_rng(0.023, 0.004, base_rng__));
                                            current_statement_begin__ = 1038;
                                            stan::math::assign(amp, normal_rng(0.743, 0.241, base_rng__));
                                            current_statement_begin__ = 1039;
                                            stan::math::assign(chf, normal_rng(0.814, 0.195, base_rng__));
                                            current_statement_begin__ = 1040;
                                            stan::math::assign(sbp, normal_rng(0.046, 0.022, base_rng__));
                                            current_statement_begin__ = 1041;
                                            stan::math::assign(hdl, normal_rng(-(0.049), 0.016, base_rng__));
                                            current_statement_begin__ = 1042;
                                            stan::math::assign(ihd, normal_rng(0.846, 0.117, base_rng__));
                                            current_statement_begin__ = 1043;
                                            stan::math::assign(smoker, normal_rng(0.277, 0.091, base_rng__));
                                            current_statement_begin__ = 1044;
                                            stan::math::assign(stroke, normal_rng(0.448, 0.173, base_rng__));
                                            current_statement_begin__ = 1045;
                                            stan::math::assign(mmalb, normal_rng(0.023, 0.094, base_rng__));
                                            current_statement_begin__ = 1046;
                                            stan::math::assign(pv, normal_rng(0.34, 0.111, base_rng__));
                                            current_statement_begin__ = 1047;
                                            stan::math::assign(wb, normal_rng(0.026, 0.013, base_rng__));
                                            current_statement_begin__ = 1048;
                                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                            current_statement_begin__ = 1049;
                                            stan::math::assign(update, simMIm(update, intercept, afro, age_diab, asian, hba1c, hdl, ldl, mmalb, pv, sbp, smoker, wb, amp, chf, ihd, stroke, rand, pstream__));
                                            }
                                        } else {
                                            {
                                            current_statement_begin__ = 1053;
                                            local_scalar_t__ intercept(DUMMY_VAR__);
                                            (void) intercept;  // dummy to suppress unused var warning
                                            stan::math::initialize(intercept, DUMMY_VAR__);
                                            stan::math::fill(intercept, DUMMY_VAR__);
                                            current_statement_begin__ = 1054;
                                            local_scalar_t__ age_diab(DUMMY_VAR__);
                                            (void) age_diab;  // dummy to suppress unused var warning
                                            stan::math::initialize(age_diab, DUMMY_VAR__);
                                            stan::math::fill(age_diab, DUMMY_VAR__);
                                            current_statement_begin__ = 1055;
                                            local_scalar_t__ chf(DUMMY_VAR__);
                                            (void) chf;  // dummy to suppress unused var warning
                                            stan::math::initialize(chf, DUMMY_VAR__);
                                            stan::math::fill(chf, DUMMY_VAR__);
                                            current_statement_begin__ = 1056;
                                            local_scalar_t__ ldl(DUMMY_VAR__);
                                            (void) ldl;  // dummy to suppress unused var warning
                                            stan::math::initialize(ldl, DUMMY_VAR__);
                                            stan::math::fill(ldl, DUMMY_VAR__);
                                            current_statement_begin__ = 1057;
                                            local_scalar_t__ hba1c(DUMMY_VAR__);
                                            (void) hba1c;  // dummy to suppress unused var warning
                                            stan::math::initialize(hba1c, DUMMY_VAR__);
                                            stan::math::fill(hba1c, DUMMY_VAR__);
                                            current_statement_begin__ = 1058;
                                            local_scalar_t__ sbp(DUMMY_VAR__);
                                            (void) sbp;  // dummy to suppress unused var warning
                                            stan::math::initialize(sbp, DUMMY_VAR__);
                                            stan::math::fill(sbp, DUMMY_VAR__);
                                            current_statement_begin__ = 1059;
                                            local_scalar_t__ ihd(DUMMY_VAR__);
                                            (void) ihd;  // dummy to suppress unused var warning
                                            stan::math::initialize(ihd, DUMMY_VAR__);
                                            stan::math::fill(ihd, DUMMY_VAR__);
                                            current_statement_begin__ = 1060;
                                            local_scalar_t__ smoker(DUMMY_VAR__);
                                            (void) smoker;  // dummy to suppress unused var warning
                                            stan::math::initialize(smoker, DUMMY_VAR__);
                                            stan::math::fill(smoker, DUMMY_VAR__);
                                            current_statement_begin__ = 1061;
                                            local_scalar_t__ ro(DUMMY_VAR__);
                                            (void) ro;  // dummy to suppress unused var warning
                                            stan::math::initialize(ro, DUMMY_VAR__);
                                            stan::math::fill(ro, DUMMY_VAR__);
                                            current_statement_begin__ = 1062;
                                            local_scalar_t__ afro(DUMMY_VAR__);
                                            (void) afro;  // dummy to suppress unused var warning
                                            stan::math::initialize(afro, DUMMY_VAR__);
                                            stan::math::fill(afro, DUMMY_VAR__);
                                            current_statement_begin__ = 1063;
                                            local_scalar_t__ egf60l(DUMMY_VAR__);
                                            (void) egf60l;  // dummy to suppress unused var warning
                                            stan::math::initialize(egf60l, DUMMY_VAR__);
                                            stan::math::fill(egf60l, DUMMY_VAR__);
                                            current_statement_begin__ = 1064;
                                            local_scalar_t__ mmalb(DUMMY_VAR__);
                                            (void) mmalb;  // dummy to suppress unused var warning
                                            stan::math::initialize(mmalb, DUMMY_VAR__);
                                            stan::math::fill(mmalb, DUMMY_VAR__);
                                            current_statement_begin__ = 1065;
                                            local_scalar_t__ pv(DUMMY_VAR__);
                                            (void) pv;  // dummy to suppress unused var warning
                                            stan::math::initialize(pv, DUMMY_VAR__);
                                            stan::math::fill(pv, DUMMY_VAR__);
                                            current_statement_begin__ = 1066;
                                            local_scalar_t__ wb(DUMMY_VAR__);
                                            (void) wb;  // dummy to suppress unused var warning
                                            stan::math::initialize(wb, DUMMY_VAR__);
                                            stan::math::fill(wb, DUMMY_VAR__);
                                            current_statement_begin__ = 1067;
                                            local_scalar_t__ ld35(DUMMY_VAR__);
                                            (void) ld35;  // dummy to suppress unused var warning
                                            stan::math::initialize(ld35, DUMMY_VAR__);
                                            stan::math::fill(ld35, DUMMY_VAR__);
                                            current_statement_begin__ = 1068;
                                            local_scalar_t__ rand(DUMMY_VAR__);
                                            (void) rand;  // dummy to suppress unused var warning
                                            stan::math::initialize(rand, DUMMY_VAR__);
                                            stan::math::fill(rand, DUMMY_VAR__);
                                            current_statement_begin__ = 1069;
                                            stan::math::assign(intercept, normal_rng(-(8.708), 0.844, base_rng__));
                                            current_statement_begin__ = 1070;
                                            stan::math::assign(ro, ro_rng(1.376, 0.097, base_rng__, pstream__));
                                            current_statement_begin__ = 1071;
                                            stan::math::assign(hba1c, normal_rng(0.078, 0.030, base_rng__));
                                            current_statement_begin__ = 1072;
                                            stan::math::assign(age_diab, normal_rng(0.041, 0.008, base_rng__));
                                            current_statement_begin__ = 1073;
                                            stan::math::assign(ldl, normal_rng(0.035, 0.007, base_rng__));
                                            current_statement_begin__ = 1074;
                                            stan::math::assign(chf, normal_rng(0.853, 0.200, base_rng__));
                                            current_statement_begin__ = 1075;
                                            stan::math::assign(sbp, normal_rng(0.056, 0.027, base_rng__));
                                            current_statement_begin__ = 1076;
                                            stan::math::assign(ihd, normal_rng(0.876, 0.163, base_rng__));
                                            current_statement_begin__ = 1077;
                                            stan::math::assign(smoker, normal_rng(0.344, 0.138, base_rng__));
                                            current_statement_begin__ = 1078;
                                            stan::math::assign(afro, normal_rng(-(1.684), 0.506, base_rng__));
                                            current_statement_begin__ = 1079;
                                            stan::math::assign(egf60l, normal_rng(-(0.28), 0.062, base_rng__));
                                            current_statement_begin__ = 1080;
                                            stan::math::assign(ld35, normal_rng(0.035, 0.007, base_rng__));
                                            current_statement_begin__ = 1081;
                                            stan::math::assign(mmalb, normal_rng(0.277, 0.129, base_rng__));
                                            current_statement_begin__ = 1082;
                                            stan::math::assign(pv, normal_rng(0.469, 0.132, base_rng__));
                                            current_statement_begin__ = 1083;
                                            stan::math::assign(wb, normal_rng(0.07, 0.023, base_rng__));
                                            current_statement_begin__ = 1084;
                                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                            current_statement_begin__ = 1085;
                                            stan::math::assign(update, simMIf(update, intercept, ro, afro, age_diab, egf60l, hba1c, ld35, mmalb, pv, sbp, smoker, wb, chf, ihd, rand, pstream__));
                                            }
                                        }
                                    } else if (as_bool(logical_eq(get_base1(update, 26, "update", 1), 1))) {
                                        {
                                        current_statement_begin__ = 1090;
                                        local_scalar_t__ intercept(DUMMY_VAR__);
                                        (void) intercept;  // dummy to suppress unused var warning
                                        stan::math::initialize(intercept, DUMMY_VAR__);
                                        stan::math::fill(intercept, DUMMY_VAR__);
                                        current_statement_begin__ = 1091;
                                        local_scalar_t__ ldl(DUMMY_VAR__);
                                        (void) ldl;  // dummy to suppress unused var warning
                                        stan::math::initialize(ldl, DUMMY_VAR__);
                                        stan::math::fill(ldl, DUMMY_VAR__);
                                        current_statement_begin__ = 1092;
                                        local_scalar_t__ mmalb(DUMMY_VAR__);
                                        (void) mmalb;  // dummy to suppress unused var warning
                                        stan::math::initialize(mmalb, DUMMY_VAR__);
                                        stan::math::fill(mmalb, DUMMY_VAR__);
                                        current_statement_begin__ = 1093;
                                        local_scalar_t__ rand(DUMMY_VAR__);
                                        (void) rand;  // dummy to suppress unused var warning
                                        stan::math::initialize(rand, DUMMY_VAR__);
                                        stan::math::fill(rand, DUMMY_VAR__);
                                        current_statement_begin__ = 1094;
                                        stan::math::assign(intercept, normal_rng(-(4.179), 0.262, base_rng__));
                                        current_statement_begin__ = 1095;
                                        stan::math::assign(ldl, normal_rng(0.021, 0.007, base_rng__));
                                        current_statement_begin__ = 1096;
                                        stan::math::assign(mmalb, normal_rng(0.344, 0.162, base_rng__));
                                        current_statement_begin__ = 1097;
                                        stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                        current_statement_begin__ = 1098;
                                        stan::math::assign(update, simMI2(update, intercept, ldl, mmalb, rand, pstream__));
                                        }
                                    }
                                } else if (as_bool(logical_eq(get_base1(order, s, "order", 1), 4))) {
                                    current_statement_begin__ = 1102;
                                    if (as_bool(logical_eq(get_base1(update, 27, "update", 1), 0))) {
                                        {
                                        current_statement_begin__ = 1103;
                                        local_scalar_t__ intercept(DUMMY_VAR__);
                                        (void) intercept;  // dummy to suppress unused var warning
                                        stan::math::initialize(intercept, DUMMY_VAR__);
                                        stan::math::fill(intercept, DUMMY_VAR__);
                                        current_statement_begin__ = 1104;
                                        local_scalar_t__ age_diab(DUMMY_VAR__);
                                        (void) age_diab;  // dummy to suppress unused var warning
                                        stan::math::initialize(age_diab, DUMMY_VAR__);
                                        stan::math::fill(age_diab, DUMMY_VAR__);
                                        current_statement_begin__ = 1105;
                                        local_scalar_t__ ldl(DUMMY_VAR__);
                                        (void) ldl;  // dummy to suppress unused var warning
                                        stan::math::initialize(ldl, DUMMY_VAR__);
                                        stan::math::fill(ldl, DUMMY_VAR__);
                                        current_statement_begin__ = 1106;
                                        local_scalar_t__ hba1c(DUMMY_VAR__);
                                        (void) hba1c;  // dummy to suppress unused var warning
                                        stan::math::initialize(hba1c, DUMMY_VAR__);
                                        stan::math::fill(hba1c, DUMMY_VAR__);
                                        current_statement_begin__ = 1107;
                                        local_scalar_t__ sbp(DUMMY_VAR__);
                                        (void) sbp;  // dummy to suppress unused var warning
                                        stan::math::initialize(sbp, DUMMY_VAR__);
                                        stan::math::fill(sbp, DUMMY_VAR__);
                                        current_statement_begin__ = 1108;
                                        local_scalar_t__ ihd(DUMMY_VAR__);
                                        (void) ihd;  // dummy to suppress unused var warning
                                        stan::math::initialize(ihd, DUMMY_VAR__);
                                        stan::math::fill(ihd, DUMMY_VAR__);
                                        current_statement_begin__ = 1109;
                                        local_scalar_t__ smoker(DUMMY_VAR__);
                                        (void) smoker;  // dummy to suppress unused var warning
                                        stan::math::initialize(smoker, DUMMY_VAR__);
                                        stan::math::fill(smoker, DUMMY_VAR__);
                                        current_statement_begin__ = 1110;
                                        local_scalar_t__ ro(DUMMY_VAR__);
                                        (void) ro;  // dummy to suppress unused var warning
                                        stan::math::initialize(ro, DUMMY_VAR__);
                                        stan::math::fill(ro, DUMMY_VAR__);
                                        current_statement_begin__ = 1111;
                                        local_scalar_t__ female(DUMMY_VAR__);
                                        (void) female;  // dummy to suppress unused var warning
                                        stan::math::initialize(female, DUMMY_VAR__);
                                        stan::math::fill(female, DUMMY_VAR__);
                                        current_statement_begin__ = 1112;
                                        local_scalar_t__ amp(DUMMY_VAR__);
                                        (void) amp;  // dummy to suppress unused var warning
                                        stan::math::initialize(amp, DUMMY_VAR__);
                                        stan::math::fill(amp, DUMMY_VAR__);
                                        current_statement_begin__ = 1113;
                                        local_scalar_t__ mmalb(DUMMY_VAR__);
                                        (void) mmalb;  // dummy to suppress unused var warning
                                        stan::math::initialize(mmalb, DUMMY_VAR__);
                                        stan::math::fill(mmalb, DUMMY_VAR__);
                                        current_statement_begin__ = 1114;
                                        local_scalar_t__ egf60l(DUMMY_VAR__);
                                        (void) egf60l;  // dummy to suppress unused var warning
                                        stan::math::initialize(egf60l, DUMMY_VAR__);
                                        stan::math::fill(egf60l, DUMMY_VAR__);
                                        current_statement_begin__ = 1115;
                                        local_scalar_t__ wb(DUMMY_VAR__);
                                        (void) wb;  // dummy to suppress unused var warning
                                        stan::math::initialize(wb, DUMMY_VAR__);
                                        stan::math::fill(wb, DUMMY_VAR__);
                                        current_statement_begin__ = 1116;
                                        local_scalar_t__ atfi(DUMMY_VAR__);
                                        (void) atfi;  // dummy to suppress unused var warning
                                        stan::math::initialize(atfi, DUMMY_VAR__);
                                        stan::math::fill(atfi, DUMMY_VAR__);
                                        current_statement_begin__ = 1117;
                                        local_scalar_t__ rand(DUMMY_VAR__);
                                        (void) rand;  // dummy to suppress unused var warning
                                        stan::math::initialize(rand, DUMMY_VAR__);
                                        stan::math::fill(rand, DUMMY_VAR__);
                                        current_statement_begin__ = 1118;
                                        stan::math::assign(intercept, normal_rng(-(13.053), 0.722, base_rng__));
                                        current_statement_begin__ = 1119;
                                        stan::math::assign(ro, ro_rng(1.466, 0.081, base_rng__, pstream__));
                                        current_statement_begin__ = 1120;
                                        stan::math::assign(hba1c, normal_rng(0.092, 0.026, base_rng__));
                                        current_statement_begin__ = 1121;
                                        stan::math::assign(age_diab, normal_rng(0.066, 0.007, base_rng__));
                                        current_statement_begin__ = 1122;
                                        stan::math::assign(female, normal_rng(-(0.420), 0.098, base_rng__));
                                        current_statement_begin__ = 1123;
                                        stan::math::assign(ldl, normal_rng(0.016, 0.004, base_rng__));
                                        current_statement_begin__ = 1124;
                                        stan::math::assign(sbp, normal_rng(0.170, 0.022, base_rng__));
                                        current_statement_begin__ = 1125;
                                        stan::math::assign(ihd, normal_rng(0.876, 0.163, base_rng__));
                                        current_statement_begin__ = 1126;
                                        stan::math::assign(smoker, normal_rng(0.331, 0.111, base_rng__));
                                        current_statement_begin__ = 1127;
                                        stan::math::assign(amp, normal_rng(1.090, 0.240, base_rng__));
                                        current_statement_begin__ = 1128;
                                        stan::math::assign(mmalb, normal_rng(0.42, 0.101, base_rng__));
                                        current_statement_begin__ = 1129;
                                        stan::math::assign(egf60l, normal_rng(-(0.19), 0.056, base_rng__));
                                        current_statement_begin__ = 1130;
                                        stan::math::assign(wb, normal_rng(0.04, 0.012, base_rng__));
                                        current_statement_begin__ = 1131;
                                        stan::math::assign(atfi, normal_rng(1.476, 0.201, base_rng__));
                                        current_statement_begin__ = 1132;
                                        stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                        current_statement_begin__ = 1133;
                                        stan::math::assign(update, simStroke(update, intercept, ro, age_diab, female, atfi, egf60l, hba1c, ldl, mmalb, sbp, smoker, wb, amp, ihd, rand, pstream__));
                                        }
                                    } else if (as_bool(logical_eq(get_base1(update, 27, "update", 1), 1))) {
                                        {
                                        current_statement_begin__ = 1137;
                                        local_scalar_t__ intercept(DUMMY_VAR__);
                                        (void) intercept;  // dummy to suppress unused var warning
                                        stan::math::initialize(intercept, DUMMY_VAR__);
                                        stan::math::fill(intercept, DUMMY_VAR__);
                                        current_statement_begin__ = 1138;
                                        local_scalar_t__ age_diab(DUMMY_VAR__);
                                        (void) age_diab;  // dummy to suppress unused var warning
                                        stan::math::initialize(age_diab, DUMMY_VAR__);
                                        stan::math::fill(age_diab, DUMMY_VAR__);
                                        current_statement_begin__ = 1139;
                                        local_scalar_t__ smoker(DUMMY_VAR__);
                                        (void) smoker;  // dummy to suppress unused var warning
                                        stan::math::initialize(smoker, DUMMY_VAR__);
                                        stan::math::fill(smoker, DUMMY_VAR__);
                                        current_statement_begin__ = 1140;
                                        local_scalar_t__ ro(DUMMY_VAR__);
                                        (void) ro;  // dummy to suppress unused var warning
                                        stan::math::initialize(ro, DUMMY_VAR__);
                                        stan::math::fill(ro, DUMMY_VAR__);
                                        current_statement_begin__ = 1141;
                                        local_scalar_t__ mmalb(DUMMY_VAR__);
                                        (void) mmalb;  // dummy to suppress unused var warning
                                        stan::math::initialize(mmalb, DUMMY_VAR__);
                                        stan::math::fill(mmalb, DUMMY_VAR__);
                                        current_statement_begin__ = 1142;
                                        local_scalar_t__ rand(DUMMY_VAR__);
                                        (void) rand;  // dummy to suppress unused var warning
                                        stan::math::initialize(rand, DUMMY_VAR__);
                                        stan::math::fill(rand, DUMMY_VAR__);
                                        current_statement_begin__ = 1143;
                                        stan::math::assign(intercept, normal_rng(-(9.431), 1.569, base_rng__));
                                        current_statement_begin__ = 1144;
                                        stan::math::assign(ro, ro_rng(1.956, 0.291, base_rng__, pstream__));
                                        current_statement_begin__ = 1145;
                                        stan::math::assign(age_diab, normal_rng(0.046, 0.018, base_rng__));
                                        current_statement_begin__ = 1146;
                                        stan::math::assign(smoker, normal_rng(0.656, 0.263, base_rng__));
                                        current_statement_begin__ = 1147;
                                        stan::math::assign(mmalb, normal_rng(0.537, 0.228, base_rng__));
                                        current_statement_begin__ = 1148;
                                        stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                        current_statement_begin__ = 1149;
                                        stan::math::assign(update, simStroke2(update, intercept, ro, age_diab, mmalb, smoker, rand, pstream__));
                                        }
                                    }
                                } else if (as_bool(logical_eq(get_base1(order, s, "order", 1), 5))) {
                                    current_statement_begin__ = 1153;
                                    if (as_bool(logical_neq(get_base1(update, 30, "update", 1), 1))) {
                                        {
                                        current_statement_begin__ = 1154;
                                        local_scalar_t__ intercept(DUMMY_VAR__);
                                        (void) intercept;  // dummy to suppress unused var warning
                                        stan::math::initialize(intercept, DUMMY_VAR__);
                                        stan::math::fill(intercept, DUMMY_VAR__);
                                        current_statement_begin__ = 1155;
                                        local_scalar_t__ age_diab(DUMMY_VAR__);
                                        (void) age_diab;  // dummy to suppress unused var warning
                                        stan::math::initialize(age_diab, DUMMY_VAR__);
                                        stan::math::fill(age_diab, DUMMY_VAR__);
                                        current_statement_begin__ = 1156;
                                        local_scalar_t__ hba1c(DUMMY_VAR__);
                                        (void) hba1c;  // dummy to suppress unused var warning
                                        stan::math::initialize(hba1c, DUMMY_VAR__);
                                        stan::math::fill(hba1c, DUMMY_VAR__);
                                        current_statement_begin__ = 1157;
                                        local_scalar_t__ sbp(DUMMY_VAR__);
                                        (void) sbp;  // dummy to suppress unused var warning
                                        stan::math::initialize(sbp, DUMMY_VAR__);
                                        stan::math::fill(sbp, DUMMY_VAR__);
                                        current_statement_begin__ = 1158;
                                        local_scalar_t__ ihd(DUMMY_VAR__);
                                        (void) ihd;  // dummy to suppress unused var warning
                                        stan::math::initialize(ihd, DUMMY_VAR__);
                                        stan::math::fill(ihd, DUMMY_VAR__);
                                        current_statement_begin__ = 1159;
                                        local_scalar_t__ chf(DUMMY_VAR__);
                                        (void) chf;  // dummy to suppress unused var warning
                                        stan::math::initialize(chf, DUMMY_VAR__);
                                        stan::math::fill(chf, DUMMY_VAR__);
                                        current_statement_begin__ = 1160;
                                        local_scalar_t__ heart(DUMMY_VAR__);
                                        (void) heart;  // dummy to suppress unused var warning
                                        stan::math::initialize(heart, DUMMY_VAR__);
                                        stan::math::fill(heart, DUMMY_VAR__);
                                        current_statement_begin__ = 1161;
                                        local_scalar_t__ wb(DUMMY_VAR__);
                                        (void) wb;  // dummy to suppress unused var warning
                                        stan::math::initialize(wb, DUMMY_VAR__);
                                        stan::math::fill(wb, DUMMY_VAR__);
                                        current_statement_begin__ = 1162;
                                        local_scalar_t__ rand(DUMMY_VAR__);
                                        (void) rand;  // dummy to suppress unused var warning
                                        stan::math::initialize(rand, DUMMY_VAR__);
                                        stan::math::fill(rand, DUMMY_VAR__);
                                        current_statement_begin__ = 1163;
                                        stan::math::assign(intercept, normal_rng(-(11.607), 0.759, base_rng__));
                                        current_statement_begin__ = 1164;
                                        stan::math::assign(hba1c, normal_rng(0.171, 0.032, base_rng__));
                                        current_statement_begin__ = 1165;
                                        stan::math::assign(age_diab, normal_rng(0.047, 0.009, base_rng__));
                                        current_statement_begin__ = 1166;
                                        stan::math::assign(sbp, normal_rng(0.068, 0.032, base_rng__));
                                        current_statement_begin__ = 1167;
                                        stan::math::assign(ihd, normal_rng(0.610, 0.208, base_rng__));
                                        current_statement_begin__ = 1168;
                                        stan::math::assign(chf, normal_rng(0.841, 0.287, base_rng__));
                                        current_statement_begin__ = 1169;
                                        stan::math::assign(heart, normal_rng(0.08, 0.039, base_rng__));
                                        current_statement_begin__ = 1170;
                                        stan::math::assign(wb, normal_rng(0.052, 0.019, base_rng__));
                                        current_statement_begin__ = 1171;
                                        stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                        current_statement_begin__ = 1172;
                                        stan::math::assign(update, simBlind(update, intercept, age_diab, hba1c, heart, sbp, wb, chf, ihd, rand, pstream__));
                                        }
                                    }
                                } else if (as_bool(logical_eq(get_base1(order, s, "order", 1), 6))) {
                                    {
                                    current_statement_begin__ = 1177;
                                    local_scalar_t__ intercept(DUMMY_VAR__);
                                    (void) intercept;  // dummy to suppress unused var warning
                                    stan::math::initialize(intercept, DUMMY_VAR__);
                                    stan::math::fill(intercept, DUMMY_VAR__);
                                    current_statement_begin__ = 1178;
                                    local_scalar_t__ age_diab(DUMMY_VAR__);
                                    (void) age_diab;  // dummy to suppress unused var warning
                                    stan::math::initialize(age_diab, DUMMY_VAR__);
                                    stan::math::fill(age_diab, DUMMY_VAR__);
                                    current_statement_begin__ = 1179;
                                    local_scalar_t__ female(DUMMY_VAR__);
                                    (void) female;  // dummy to suppress unused var warning
                                    stan::math::initialize(female, DUMMY_VAR__);
                                    stan::math::fill(female, DUMMY_VAR__);
                                    current_statement_begin__ = 1180;
                                    local_scalar_t__ bmi(DUMMY_VAR__);
                                    (void) bmi;  // dummy to suppress unused var warning
                                    stan::math::initialize(bmi, DUMMY_VAR__);
                                    stan::math::fill(bmi, DUMMY_VAR__);
                                    current_statement_begin__ = 1181;
                                    local_scalar_t__ hba1c(DUMMY_VAR__);
                                    (void) hba1c;  // dummy to suppress unused var warning
                                    stan::math::initialize(hba1c, DUMMY_VAR__);
                                    stan::math::fill(hba1c, DUMMY_VAR__);
                                    current_statement_begin__ = 1182;
                                    local_scalar_t__ rand(DUMMY_VAR__);
                                    (void) rand;  // dummy to suppress unused var warning
                                    stan::math::initialize(rand, DUMMY_VAR__);
                                    stan::math::fill(rand, DUMMY_VAR__);
                                    current_statement_begin__ = 1183;
                                    local_scalar_t__ pv(DUMMY_VAR__);
                                    (void) pv;  // dummy to suppress unused var warning
                                    stan::math::initialize(pv, DUMMY_VAR__);
                                    stan::math::fill(pv, DUMMY_VAR__);
                                    current_statement_begin__ = 1184;
                                    stan::math::assign(intercept, normal_rng(-(4.179), 0.262, base_rng__));
                                    current_statement_begin__ = 1185;
                                    stan::math::assign(age_diab, normal_rng(0.021, 0.007, base_rng__));
                                    current_statement_begin__ = 1186;
                                    stan::math::assign(female, normal_rng(0.021, 0.007, base_rng__));
                                    current_statement_begin__ = 1187;
                                    stan::math::assign(bmi, normal_rng(0.021, 0.007, base_rng__));
                                    current_statement_begin__ = 1188;
                                    stan::math::assign(hba1c, normal_rng(0.021, 0.007, base_rng__));
                                    current_statement_begin__ = 1189;
                                    stan::math::assign(pv, normal_rng(0.968, 0.258, base_rng__));
                                    current_statement_begin__ = 1190;
                                    stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                    current_statement_begin__ = 1191;
                                    stan::math::assign(update, simUlcer(update, intercept, age_diab, female, bmi, hba1c, pv, rand, pstream__));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order, s, "order", 1), 7))) {
                                    current_statement_begin__ = 1194;
                                    if (as_bool(logical_eq(get_base1(update, 25, "update", 1), 0))) {
                                        current_statement_begin__ = 1195;
                                        if (as_bool(logical_eq(get_base1(update, 24, "update", 1), 0))) {
                                            {
                                            current_statement_begin__ = 1196;
                                            local_scalar_t__ intercept(DUMMY_VAR__);
                                            (void) intercept;  // dummy to suppress unused var warning
                                            stan::math::initialize(intercept, DUMMY_VAR__);
                                            stan::math::fill(intercept, DUMMY_VAR__);
                                            current_statement_begin__ = 1197;
                                            local_scalar_t__ age_diab(DUMMY_VAR__);
                                            (void) age_diab;  // dummy to suppress unused var warning
                                            stan::math::initialize(age_diab, DUMMY_VAR__);
                                            stan::math::fill(age_diab, DUMMY_VAR__);
                                            current_statement_begin__ = 1198;
                                            local_scalar_t__ hdl(DUMMY_VAR__);
                                            (void) hdl;  // dummy to suppress unused var warning
                                            stan::math::initialize(hdl, DUMMY_VAR__);
                                            stan::math::fill(hdl, DUMMY_VAR__);
                                            current_statement_begin__ = 1199;
                                            local_scalar_t__ hba1c(DUMMY_VAR__);
                                            (void) hba1c;  // dummy to suppress unused var warning
                                            stan::math::initialize(hba1c, DUMMY_VAR__);
                                            stan::math::fill(hba1c, DUMMY_VAR__);
                                            current_statement_begin__ = 1200;
                                            local_scalar_t__ sbp(DUMMY_VAR__);
                                            (void) sbp;  // dummy to suppress unused var warning
                                            stan::math::initialize(sbp, DUMMY_VAR__);
                                            stan::math::fill(sbp, DUMMY_VAR__);
                                            current_statement_begin__ = 1201;
                                            local_scalar_t__ stroke(DUMMY_VAR__);
                                            (void) stroke;  // dummy to suppress unused var warning
                                            stan::math::initialize(stroke, DUMMY_VAR__);
                                            stan::math::fill(stroke, DUMMY_VAR__);
                                            current_statement_begin__ = 1202;
                                            local_scalar_t__ ro(DUMMY_VAR__);
                                            (void) ro;  // dummy to suppress unused var warning
                                            stan::math::initialize(ro, DUMMY_VAR__);
                                            stan::math::fill(ro, DUMMY_VAR__);
                                            current_statement_begin__ = 1203;
                                            local_scalar_t__ female(DUMMY_VAR__);
                                            (void) female;  // dummy to suppress unused var warning
                                            stan::math::initialize(female, DUMMY_VAR__);
                                            stan::math::fill(female, DUMMY_VAR__);
                                            current_statement_begin__ = 1204;
                                            local_scalar_t__ atfi(DUMMY_VAR__);
                                            (void) atfi;  // dummy to suppress unused var warning
                                            stan::math::initialize(atfi, DUMMY_VAR__);
                                            stan::math::fill(atfi, DUMMY_VAR__);
                                            current_statement_begin__ = 1205;
                                            local_scalar_t__ heart(DUMMY_VAR__);
                                            (void) heart;  // dummy to suppress unused var warning
                                            stan::math::initialize(heart, DUMMY_VAR__);
                                            stan::math::fill(heart, DUMMY_VAR__);
                                            current_statement_begin__ = 1206;
                                            local_scalar_t__ mmalb(DUMMY_VAR__);
                                            (void) mmalb;  // dummy to suppress unused var warning
                                            stan::math::initialize(mmalb, DUMMY_VAR__);
                                            stan::math::fill(mmalb, DUMMY_VAR__);
                                            current_statement_begin__ = 1207;
                                            local_scalar_t__ pv(DUMMY_VAR__);
                                            (void) pv;  // dummy to suppress unused var warning
                                            stan::math::initialize(pv, DUMMY_VAR__);
                                            stan::math::fill(pv, DUMMY_VAR__);
                                            current_statement_begin__ = 1208;
                                            local_scalar_t__ wb(DUMMY_VAR__);
                                            (void) wb;  // dummy to suppress unused var warning
                                            stan::math::initialize(wb, DUMMY_VAR__);
                                            stan::math::fill(wb, DUMMY_VAR__);
                                            current_statement_begin__ = 1209;
                                            local_scalar_t__ rand(DUMMY_VAR__);
                                            (void) rand;  // dummy to suppress unused var warning
                                            stan::math::initialize(rand, DUMMY_VAR__);
                                            stan::math::fill(rand, DUMMY_VAR__);
                                            current_statement_begin__ = 1210;
                                            stan::math::assign(intercept, normal_rng(-(14.844), 1.205, base_rng__));
                                            current_statement_begin__ = 1211;
                                            stan::math::assign(ro, ro_rng(2.067, 0.193, base_rng__, pstream__));
                                            current_statement_begin__ = 1212;
                                            stan::math::assign(hba1c, normal_rng(0.248, 0.042, base_rng__));
                                            current_statement_begin__ = 1213;
                                            stan::math::assign(age_diab, normal_rng(0.023, 0.011, base_rng__));
                                            current_statement_begin__ = 1214;
                                            stan::math::assign(female, normal_rng(-(0.445), 0.189, base_rng__));
                                            current_statement_begin__ = 1215;
                                            stan::math::assign(hdl, normal_rng(-(0.059), 0.032, base_rng__));
                                            current_statement_begin__ = 1216;
                                            stan::math::assign(sbp, normal_rng(0.086, 0.043, base_rng__));
                                            current_statement_begin__ = 1217;
                                            stan::math::assign(stroke, normal_rng(1.299, 0.245, base_rng__));
                                            current_statement_begin__ = 1218;
                                            stan::math::assign(atfi, normal_rng(1.088, 0.398, base_rng__));
                                            current_statement_begin__ = 1219;
                                            stan::math::assign(heart, normal_rng(0.098, 0.05, base_rng__));
                                            current_statement_begin__ = 1220;
                                            stan::math::assign(mmalb, normal_rng(0.602, 0.18, base_rng__));
                                            current_statement_begin__ = 1221;
                                            stan::math::assign(pv, normal_rng(1.01, 0.189, base_rng__));
                                            current_statement_begin__ = 1222;
                                            stan::math::assign(wb, normal_rng(0.04, 0.017, base_rng__));
                                            current_statement_begin__ = 1223;
                                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                            current_statement_begin__ = 1224;
                                            stan::math::assign(update, simAmp_noUlcer(update, intercept, ro, age_diab, female, atfi, hba1c, hdl, heart, mmalb, pv, sbp, wb, stroke, rand, pstream__));
                                            }
                                        } else {
                                            {
                                            current_statement_begin__ = 1228;
                                            local_scalar_t__ intercept(DUMMY_VAR__);
                                            (void) intercept;  // dummy to suppress unused var warning
                                            stan::math::initialize(intercept, DUMMY_VAR__);
                                            stan::math::fill(intercept, DUMMY_VAR__);
                                            current_statement_begin__ = 1229;
                                            local_scalar_t__ age_diab(DUMMY_VAR__);
                                            (void) age_diab;  // dummy to suppress unused var warning
                                            stan::math::initialize(age_diab, DUMMY_VAR__);
                                            stan::math::fill(age_diab, DUMMY_VAR__);
                                            current_statement_begin__ = 1230;
                                            local_scalar_t__ rand(DUMMY_VAR__);
                                            (void) rand;  // dummy to suppress unused var warning
                                            stan::math::initialize(rand, DUMMY_VAR__);
                                            stan::math::fill(rand, DUMMY_VAR__);
                                            current_statement_begin__ = 1231;
                                            local_scalar_t__ pv(DUMMY_VAR__);
                                            (void) pv;  // dummy to suppress unused var warning
                                            stan::math::initialize(pv, DUMMY_VAR__);
                                            stan::math::fill(pv, DUMMY_VAR__);
                                            current_statement_begin__ = 1232;
                                            stan::math::assign(intercept, normal_rng(-(0.881), 1.390, base_rng__));
                                            current_statement_begin__ = 1233;
                                            stan::math::assign(age_diab, normal_rng(-(0.065), 0.027, base_rng__));
                                            current_statement_begin__ = 1234;
                                            stan::math::assign(pv, normal_rng(1.769, 0.449, base_rng__));
                                            current_statement_begin__ = 1235;
                                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                            current_statement_begin__ = 1236;
                                            stan::math::assign(update, simAmp_Ulcer(update, intercept, age_diab, pv, rand, pstream__));
                                            }
                                        }
                                    } else if (as_bool(logical_eq(get_base1(update, 25, "update", 1), 1))) {
                                        {
                                        current_statement_begin__ = 1240;
                                        local_scalar_t__ intercept(DUMMY_VAR__);
                                        (void) intercept;  // dummy to suppress unused var warning
                                        stan::math::initialize(intercept, DUMMY_VAR__);
                                        stan::math::fill(intercept, DUMMY_VAR__);
                                        current_statement_begin__ = 1241;
                                        local_scalar_t__ hb1ac(DUMMY_VAR__);
                                        (void) hb1ac;  // dummy to suppress unused var warning
                                        stan::math::initialize(hb1ac, DUMMY_VAR__);
                                        stan::math::fill(hb1ac, DUMMY_VAR__);
                                        current_statement_begin__ = 1242;
                                        local_scalar_t__ rand(DUMMY_VAR__);
                                        (void) rand;  // dummy to suppress unused var warning
                                        stan::math::initialize(rand, DUMMY_VAR__);
                                        stan::math::fill(rand, DUMMY_VAR__);
                                        current_statement_begin__ = 1243;
                                        stan::math::assign(intercept, normal_rng(-(3.455), 0.565, base_rng__));
                                        current_statement_begin__ = 1244;
                                        stan::math::assign(hb1ac, normal_rng(0.127, 0.060, base_rng__));
                                        current_statement_begin__ = 1245;
                                        stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                        current_statement_begin__ = 1246;
                                        stan::math::assign(update, simAmp2(update, intercept, hb1ac, rand, pstream__));
                                        }
                                    }
                                } else {
                                    current_statement_begin__ = 1250;
                                    if (as_bool(logical_neq(get_base1(update, 31, "update", 1), 1))) {
                                        {
                                        current_statement_begin__ = 1251;
                                        local_scalar_t__ intercept(DUMMY_VAR__);
                                        (void) intercept;  // dummy to suppress unused var warning
                                        stan::math::initialize(intercept, DUMMY_VAR__);
                                        stan::math::fill(intercept, DUMMY_VAR__);
                                        current_statement_begin__ = 1252;
                                        local_scalar_t__ age_diab(DUMMY_VAR__);
                                        (void) age_diab;  // dummy to suppress unused var warning
                                        stan::math::initialize(age_diab, DUMMY_VAR__);
                                        stan::math::fill(age_diab, DUMMY_VAR__);
                                        current_statement_begin__ = 1253;
                                        local_scalar_t__ female(DUMMY_VAR__);
                                        (void) female;  // dummy to suppress unused var warning
                                        stan::math::initialize(female, DUMMY_VAR__);
                                        stan::math::fill(female, DUMMY_VAR__);
                                        current_statement_begin__ = 1254;
                                        local_scalar_t__ bmi(DUMMY_VAR__);
                                        (void) bmi;  // dummy to suppress unused var warning
                                        stan::math::initialize(bmi, DUMMY_VAR__);
                                        stan::math::fill(bmi, DUMMY_VAR__);
                                        current_statement_begin__ = 1255;
                                        local_scalar_t__ ldl(DUMMY_VAR__);
                                        (void) ldl;  // dummy to suppress unused var warning
                                        stan::math::initialize(ldl, DUMMY_VAR__);
                                        stan::math::fill(ldl, DUMMY_VAR__);
                                        current_statement_begin__ = 1256;
                                        local_scalar_t__ sbp(DUMMY_VAR__);
                                        (void) sbp;  // dummy to suppress unused var warning
                                        stan::math::initialize(sbp, DUMMY_VAR__);
                                        stan::math::fill(sbp, DUMMY_VAR__);
                                        current_statement_begin__ = 1257;
                                        local_scalar_t__ amp(DUMMY_VAR__);
                                        (void) amp;  // dummy to suppress unused var warning
                                        stan::math::initialize(amp, DUMMY_VAR__);
                                        stan::math::fill(amp, DUMMY_VAR__);
                                        current_statement_begin__ = 1258;
                                        local_scalar_t__ blind(DUMMY_VAR__);
                                        (void) blind;  // dummy to suppress unused var warning
                                        stan::math::initialize(blind, DUMMY_VAR__);
                                        stan::math::fill(blind, DUMMY_VAR__);
                                        current_statement_begin__ = 1259;
                                        local_scalar_t__ efgr(DUMMY_VAR__);
                                        (void) efgr;  // dummy to suppress unused var warning
                                        stan::math::initialize(efgr, DUMMY_VAR__);
                                        stan::math::fill(efgr, DUMMY_VAR__);
                                        current_statement_begin__ = 1260;
                                        local_scalar_t__ afro(DUMMY_VAR__);
                                        (void) afro;  // dummy to suppress unused var warning
                                        stan::math::initialize(afro, DUMMY_VAR__);
                                        stan::math::fill(afro, DUMMY_VAR__);
                                        current_statement_begin__ = 1261;
                                        local_scalar_t__ efr60l(DUMMY_VAR__);
                                        (void) efr60l;  // dummy to suppress unused var warning
                                        stan::math::initialize(efr60l, DUMMY_VAR__);
                                        stan::math::fill(efr60l, DUMMY_VAR__);
                                        current_statement_begin__ = 1262;
                                        local_scalar_t__ efr60m(DUMMY_VAR__);
                                        (void) efr60m;  // dummy to suppress unused var warning
                                        stan::math::initialize(efr60m, DUMMY_VAR__);
                                        stan::math::fill(efr60m, DUMMY_VAR__);
                                        current_statement_begin__ = 1263;
                                        local_scalar_t__ haemo(DUMMY_VAR__);
                                        (void) haemo;  // dummy to suppress unused var warning
                                        stan::math::initialize(haemo, DUMMY_VAR__);
                                        stan::math::fill(haemo, DUMMY_VAR__);
                                        current_statement_begin__ = 1264;
                                        local_scalar_t__ mmalb(DUMMY_VAR__);
                                        (void) mmalb;  // dummy to suppress unused var warning
                                        stan::math::initialize(mmalb, DUMMY_VAR__);
                                        stan::math::fill(mmalb, DUMMY_VAR__);
                                        current_statement_begin__ = 1265;
                                        local_scalar_t__ wb(DUMMY_VAR__);
                                        (void) wb;  // dummy to suppress unused var warning
                                        stan::math::initialize(wb, DUMMY_VAR__);
                                        stan::math::fill(wb, DUMMY_VAR__);
                                        current_statement_begin__ = 1266;
                                        local_scalar_t__ rand(DUMMY_VAR__);
                                        (void) rand;  // dummy to suppress unused var warning
                                        stan::math::initialize(rand, DUMMY_VAR__);
                                        stan::math::fill(rand, DUMMY_VAR__);
                                        current_statement_begin__ = 1267;
                                        stan::math::assign(intercept, normal_rng(-(13.549), 1.480, base_rng__));
                                        current_statement_begin__ = 1268;
                                        stan::math::assign(age_diab, normal_rng(-(0.029), 0.013, base_rng__));
                                        current_statement_begin__ = 1269;
                                        stan::math::assign(female, normal_rng(-(0.869), 0.224, base_rng__));
                                        current_statement_begin__ = 1270;
                                        stan::math::assign(bmi, normal_rng(-(0.054), 0.020, base_rng__));
                                        current_statement_begin__ = 1271;
                                        stan::math::assign(ldl, normal_rng(0.027, 0.007, base_rng__));
                                        current_statement_begin__ = 1272;
                                        stan::math::assign(sbp, normal_rng(0.085, 0.047, base_rng__));
                                        current_statement_begin__ = 1273;
                                        stan::math::assign(amp, normal_rng(1.108, 0.337, base_rng__));
                                        current_statement_begin__ = 1274;
                                        stan::math::assign(blind, normal_rng(0.732, 0.290, base_rng__));
                                        current_statement_begin__ = 1275;
                                        stan::math::assign(afro, normal_rng(0.686, 0.324, base_rng__));
                                        current_statement_begin__ = 1276;
                                        stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                        current_statement_begin__ = 1277;
                                        stan::math::assign(efr60l, normal_rng(-(1.031), 0.085, base_rng__));
                                        current_statement_begin__ = 1278;
                                        stan::math::assign(efr60m, normal_rng(-(0.487), 0.136, base_rng__));
                                        current_statement_begin__ = 1279;
                                        stan::math::assign(haemo, normal_rng(-(0.268), 0.061, base_rng__));
                                        current_statement_begin__ = 1280;
                                        stan::math::assign(mmalb, normal_rng(1.373, 0.236, base_rng__));
                                        current_statement_begin__ = 1281;
                                        stan::math::assign(wb, normal_rng(0.029, 0.013, base_rng__));
                                        current_statement_begin__ = 1282;
                                        stan::math::assign(update, simRenal(update, intercept, afro, age_diab, female, bmi, efr60l, efr60m, haemo, ldl, mmalb, sbp, wb, amp, blind, rand, pstream__));
                                        }
                                    }
                                }
                            }
                            current_statement_begin__ = 1287;
                            if (as_bool(logical_gte(sum(stan::model::rvalue(update, stan::model::cons_list(stan::model::index_min_max(33, 38), stan::model::nil_index_list()), "update")), 1))) {
                                current_statement_begin__ = 1288;
                                stan::math::assign(primera, (primera + 1));
                            }
                            current_statement_begin__ = 1290;
                            if (as_bool((primitive_value(logical_eq(sum(stan::model::rvalue(update, stan::model::cons_list(stan::model::index_min_max(24, 31), stan::model::nil_index_list()), "update")), 0)) && primitive_value(logical_eq(sum(stan::model::rvalue(update, stan::model::cons_list(stan::model::index_min_max(33, 38), stan::model::nil_index_list()), "update")), 0))))) {
                                {
                                current_statement_begin__ = 1291;
                                local_scalar_t__ intercept(DUMMY_VAR__);
                                (void) intercept;  // dummy to suppress unused var warning
                                stan::math::initialize(intercept, DUMMY_VAR__);
                                stan::math::fill(intercept, DUMMY_VAR__);
                                current_statement_begin__ = 1292;
                                local_scalar_t__ phi(DUMMY_VAR__);
                                (void) phi;  // dummy to suppress unused var warning
                                stan::math::initialize(phi, DUMMY_VAR__);
                                stan::math::fill(phi, DUMMY_VAR__);
                                current_statement_begin__ = 1293;
                                local_scalar_t__ female(DUMMY_VAR__);
                                (void) female;  // dummy to suppress unused var warning
                                stan::math::initialize(female, DUMMY_VAR__);
                                stan::math::fill(female, DUMMY_VAR__);
                                current_statement_begin__ = 1294;
                                local_scalar_t__ smoker(DUMMY_VAR__);
                                (void) smoker;  // dummy to suppress unused var warning
                                stan::math::initialize(smoker, DUMMY_VAR__);
                                stan::math::fill(smoker, DUMMY_VAR__);
                                current_statement_begin__ = 1295;
                                local_scalar_t__ rand(DUMMY_VAR__);
                                (void) rand;  // dummy to suppress unused var warning
                                stan::math::initialize(rand, DUMMY_VAR__);
                                stan::math::fill(rand, DUMMY_VAR__);
                                current_statement_begin__ = 1296;
                                stan::math::assign(intercept, normal_rng(-(10.908), 0.304, base_rng__));
                                current_statement_begin__ = 1297;
                                stan::math::assign(phi, ro_rng(0.098, 0.004, base_rng__, pstream__));
                                current_statement_begin__ = 1298;
                                stan::math::assign(female, normal_rng(-(0.229), 0.077, base_rng__));
                                current_statement_begin__ = 1299;
                                stan::math::assign(smoker, normal_rng(0.379, 0.089, base_rng__));
                                current_statement_begin__ = 1300;
                                stan::math::assign(update, simDeath_nohist(update, intercept, phi, female, smoker, rand, pstream__));
                                }
                            } else if (as_bool(logical_eq(primera, 1))) {
                                {
                                current_statement_begin__ = 1303;
                                local_scalar_t__ intercept(DUMMY_VAR__);
                                (void) intercept;  // dummy to suppress unused var warning
                                stan::math::initialize(intercept, DUMMY_VAR__);
                                stan::math::fill(intercept, DUMMY_VAR__);
                                current_statement_begin__ = 1304;
                                local_scalar_t__ year(DUMMY_VAR__);
                                (void) year;  // dummy to suppress unused var warning
                                stan::math::initialize(year, DUMMY_VAR__);
                                stan::math::fill(year, DUMMY_VAR__);
                                current_statement_begin__ = 1305;
                                local_scalar_t__ age(DUMMY_VAR__);
                                (void) age;  // dummy to suppress unused var warning
                                stan::math::initialize(age, DUMMY_VAR__);
                                stan::math::fill(age, DUMMY_VAR__);
                                current_statement_begin__ = 1306;
                                local_scalar_t__ smoker(DUMMY_VAR__);
                                (void) smoker;  // dummy to suppress unused var warning
                                stan::math::initialize(smoker, DUMMY_VAR__);
                                stan::math::fill(smoker, DUMMY_VAR__);
                                current_statement_begin__ = 1307;
                                local_scalar_t__ asian(DUMMY_VAR__);
                                (void) asian;  // dummy to suppress unused var warning
                                stan::math::initialize(asian, DUMMY_VAR__);
                                stan::math::fill(asian, DUMMY_VAR__);
                                current_statement_begin__ = 1308;
                                local_scalar_t__ heart(DUMMY_VAR__);
                                (void) heart;  // dummy to suppress unused var warning
                                stan::math::initialize(heart, DUMMY_VAR__);
                                stan::math::fill(heart, DUMMY_VAR__);
                                current_statement_begin__ = 1309;
                                local_scalar_t__ pv(DUMMY_VAR__);
                                (void) pv;  // dummy to suppress unused var warning
                                stan::math::initialize(pv, DUMMY_VAR__);
                                stan::math::fill(pv, DUMMY_VAR__);
                                current_statement_begin__ = 1310;
                                local_scalar_t__ amp_event(DUMMY_VAR__);
                                (void) amp_event;  // dummy to suppress unused var warning
                                stan::math::initialize(amp_event, DUMMY_VAR__);
                                stan::math::fill(amp_event, DUMMY_VAR__);
                                current_statement_begin__ = 1311;
                                local_scalar_t__ ihd_event(DUMMY_VAR__);
                                (void) ihd_event;  // dummy to suppress unused var warning
                                stan::math::initialize(ihd_event, DUMMY_VAR__);
                                stan::math::fill(ihd_event, DUMMY_VAR__);
                                current_statement_begin__ = 1312;
                                local_scalar_t__ mi_event(DUMMY_VAR__);
                                (void) mi_event;  // dummy to suppress unused var warning
                                stan::math::initialize(mi_event, DUMMY_VAR__);
                                stan::math::fill(mi_event, DUMMY_VAR__);
                                current_statement_begin__ = 1313;
                                local_scalar_t__ renal_event(DUMMY_VAR__);
                                (void) renal_event;  // dummy to suppress unused var warning
                                stan::math::initialize(renal_event, DUMMY_VAR__);
                                stan::math::fill(renal_event, DUMMY_VAR__);
                                current_statement_begin__ = 1314;
                                local_scalar_t__ stroke_event(DUMMY_VAR__);
                                (void) stroke_event;  // dummy to suppress unused var warning
                                stan::math::initialize(stroke_event, DUMMY_VAR__);
                                stan::math::fill(stroke_event, DUMMY_VAR__);
                                current_statement_begin__ = 1315;
                                local_scalar_t__ rand(DUMMY_VAR__);
                                (void) rand;  // dummy to suppress unused var warning
                                stan::math::initialize(rand, DUMMY_VAR__);
                                stan::math::fill(rand, DUMMY_VAR__);
                                current_statement_begin__ = 1316;
                                stan::math::assign(intercept, normal_rng(-(6.916), 0.591, base_rng__));
                                current_statement_begin__ = 1317;
                                stan::math::assign(asian, normal_rng(-(0.54), 0.205, base_rng__));
                                current_statement_begin__ = 1318;
                                stan::math::assign(year, normal_rng(0.042, 0.010, base_rng__));
                                current_statement_begin__ = 1319;
                                stan::math::assign(age, normal_rng(0.058, 0.007, base_rng__));
                                current_statement_begin__ = 1320;
                                stan::math::assign(smoker, normal_rng(0.444, 0.117, base_rng__));
                                current_statement_begin__ = 1321;
                                stan::math::assign(heart, normal_rng(0.124, 0.032, base_rng__));
                                current_statement_begin__ = 1322;
                                stan::math::assign(pv, normal_rng(0.367, 0.13, base_rng__));
                                current_statement_begin__ = 1323;
                                stan::math::assign(amp_event, normal_rng(-(0.734), 0.321, base_rng__));
                                current_statement_begin__ = 1324;
                                stan::math::assign(ihd_event, normal_rng(0.423, 0.168, base_rng__));
                                current_statement_begin__ = 1325;
                                stan::math::assign(mi_event, normal_rng(1.309, 0.158, base_rng__));
                                current_statement_begin__ = 1326;
                                stan::math::assign(renal_event, normal_rng(0.584, 0.305, base_rng__));
                                current_statement_begin__ = 1327;
                                stan::math::assign(stroke_event, normal_rng(0.547, 0.176, base_rng__));
                                current_statement_begin__ = 1328;
                                stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                current_statement_begin__ = 1329;
                                stan::math::assign(update, simDeath1st(update, intercept, asian, year, age, heart, pv, smoker, amp_event, ihd_event, mi_event, renal_event, stroke_event, rand, pstream__));
                                }
                            } else if (as_bool(logical_gte(sum(stan::model::rvalue(update, stan::model::cons_list(stan::model::index_min_max(24, 31), stan::model::nil_index_list()), "update")), 1))) {
                                {
                                current_statement_begin__ = 1333;
                                local_scalar_t__ intercept(DUMMY_VAR__);
                                (void) intercept;  // dummy to suppress unused var warning
                                stan::math::initialize(intercept, DUMMY_VAR__);
                                stan::math::fill(intercept, DUMMY_VAR__);
                                current_statement_begin__ = 1334;
                                local_scalar_t__ phi(DUMMY_VAR__);
                                (void) phi;  // dummy to suppress unused var warning
                                stan::math::initialize(phi, DUMMY_VAR__);
                                stan::math::fill(phi, DUMMY_VAR__);
                                current_statement_begin__ = 1335;
                                local_scalar_t__ bm1(DUMMY_VAR__);
                                (void) bm1;  // dummy to suppress unused var warning
                                stan::math::initialize(bm1, DUMMY_VAR__);
                                stan::math::fill(bm1, DUMMY_VAR__);
                                current_statement_begin__ = 1336;
                                local_scalar_t__ bm3(DUMMY_VAR__);
                                (void) bm3;  // dummy to suppress unused var warning
                                stan::math::initialize(bm3, DUMMY_VAR__);
                                stan::math::fill(bm3, DUMMY_VAR__);
                                current_statement_begin__ = 1337;
                                local_scalar_t__ smoker(DUMMY_VAR__);
                                (void) smoker;  // dummy to suppress unused var warning
                                stan::math::initialize(smoker, DUMMY_VAR__);
                                stan::math::fill(smoker, DUMMY_VAR__);
                                current_statement_begin__ = 1338;
                                local_scalar_t__ amp(DUMMY_VAR__);
                                (void) amp;  // dummy to suppress unused var warning
                                stan::math::initialize(amp, DUMMY_VAR__);
                                stan::math::fill(amp, DUMMY_VAR__);
                                current_statement_begin__ = 1339;
                                local_scalar_t__ chf(DUMMY_VAR__);
                                (void) chf;  // dummy to suppress unused var warning
                                stan::math::initialize(chf, DUMMY_VAR__);
                                stan::math::fill(chf, DUMMY_VAR__);
                                current_statement_begin__ = 1340;
                                local_scalar_t__ renal(DUMMY_VAR__);
                                (void) renal;  // dummy to suppress unused var warning
                                stan::math::initialize(renal, DUMMY_VAR__);
                                stan::math::fill(renal, DUMMY_VAR__);
                                current_statement_begin__ = 1341;
                                local_scalar_t__ stroke(DUMMY_VAR__);
                                (void) stroke;  // dummy to suppress unused var warning
                                stan::math::initialize(stroke, DUMMY_VAR__);
                                stan::math::fill(stroke, DUMMY_VAR__);
                                current_statement_begin__ = 1342;
                                local_scalar_t__ mmalb(DUMMY_VAR__);
                                (void) mmalb;  // dummy to suppress unused var warning
                                stan::math::initialize(mmalb, DUMMY_VAR__);
                                stan::math::fill(mmalb, DUMMY_VAR__);
                                current_statement_begin__ = 1343;
                                local_scalar_t__ wb(DUMMY_VAR__);
                                (void) wb;  // dummy to suppress unused var warning
                                stan::math::initialize(wb, DUMMY_VAR__);
                                stan::math::fill(wb, DUMMY_VAR__);
                                current_statement_begin__ = 1344;
                                local_scalar_t__ rand(DUMMY_VAR__);
                                (void) rand;  // dummy to suppress unused var warning
                                stan::math::initialize(rand, DUMMY_VAR__);
                                stan::math::fill(rand, DUMMY_VAR__);
                                current_statement_begin__ = 1345;
                                stan::math::assign(intercept, normal_rng(-(9.207), 0.591, base_rng__));
                                current_statement_begin__ = 1346;
                                stan::math::assign(phi, ro_rng(0.073, 0.007, base_rng__, pstream__));
                                current_statement_begin__ = 1347;
                                stan::math::assign(bm1, normal_rng(1.083, 0.511, base_rng__));
                                current_statement_begin__ = 1348;
                                stan::math::assign(bm3, normal_rng(-(0.293), 0.114, base_rng__));
                                current_statement_begin__ = 1349;
                                stan::math::assign(smoker, normal_rng(0.374, 0.133, base_rng__));
                                current_statement_begin__ = 1350;
                                stan::math::assign(amp, normal_rng(0.539, 0.198, base_rng__));
                                current_statement_begin__ = 1351;
                                stan::math::assign(chf, normal_rng(0.632, 0.130, base_rng__));
                                current_statement_begin__ = 1352;
                                stan::math::assign(renal, normal_rng(1.150, 0.197, base_rng__));
                                current_statement_begin__ = 1353;
                                stan::math::assign(stroke, normal_rng(0.473, 0.122, base_rng__));
                                current_statement_begin__ = 1354;
                                stan::math::assign(mmalb, normal_rng(0.348, 0.107, base_rng__));
                                current_statement_begin__ = 1355;
                                stan::math::assign(wb, normal_rng(0.048, 0.011, base_rng__));
                                current_statement_begin__ = 1356;
                                stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                current_statement_begin__ = 1357;
                                stan::math::assign(update, simDeath_hist(update, intercept, phi, bm1, bm3, mmalb, smoker, wb, amp, chf, renal, stroke, rand, pstream__));
                                }
                            } else {
                                {
                                current_statement_begin__ = 1361;
                                local_scalar_t__ intercept(DUMMY_VAR__);
                                (void) intercept;  // dummy to suppress unused var warning
                                stan::math::initialize(intercept, DUMMY_VAR__);
                                stan::math::fill(intercept, DUMMY_VAR__);
                                current_statement_begin__ = 1362;
                                local_scalar_t__ age(DUMMY_VAR__);
                                (void) age;  // dummy to suppress unused var warning
                                stan::math::initialize(age, DUMMY_VAR__);
                                stan::math::fill(age, DUMMY_VAR__);
                                current_statement_begin__ = 1363;
                                local_scalar_t__ hdl(DUMMY_VAR__);
                                (void) hdl;  // dummy to suppress unused var warning
                                stan::math::initialize(hdl, DUMMY_VAR__);
                                stan::math::fill(hdl, DUMMY_VAR__);
                                current_statement_begin__ = 1364;
                                local_scalar_t__ atfi(DUMMY_VAR__);
                                (void) atfi;  // dummy to suppress unused var warning
                                stan::math::initialize(atfi, DUMMY_VAR__);
                                stan::math::fill(atfi, DUMMY_VAR__);
                                current_statement_begin__ = 1365;
                                local_scalar_t__ pv(DUMMY_VAR__);
                                (void) pv;  // dummy to suppress unused var warning
                                stan::math::initialize(pv, DUMMY_VAR__);
                                stan::math::fill(pv, DUMMY_VAR__);
                                current_statement_begin__ = 1366;
                                local_scalar_t__ wb(DUMMY_VAR__);
                                (void) wb;  // dummy to suppress unused var warning
                                stan::math::initialize(wb, DUMMY_VAR__);
                                stan::math::fill(wb, DUMMY_VAR__);
                                current_statement_begin__ = 1367;
                                local_scalar_t__ amp_event(DUMMY_VAR__);
                                (void) amp_event;  // dummy to suppress unused var warning
                                stan::math::initialize(amp_event, DUMMY_VAR__);
                                stan::math::fill(amp_event, DUMMY_VAR__);
                                current_statement_begin__ = 1368;
                                local_scalar_t__ amp(DUMMY_VAR__);
                                (void) amp;  // dummy to suppress unused var warning
                                stan::math::initialize(amp, DUMMY_VAR__);
                                stan::math::fill(amp, DUMMY_VAR__);
                                current_statement_begin__ = 1369;
                                local_scalar_t__ amp_event2(DUMMY_VAR__);
                                (void) amp_event2;  // dummy to suppress unused var warning
                                stan::math::initialize(amp_event2, DUMMY_VAR__);
                                stan::math::fill(amp_event2, DUMMY_VAR__);
                                current_statement_begin__ = 1370;
                                local_scalar_t__ ihd_event(DUMMY_VAR__);
                                (void) ihd_event;  // dummy to suppress unused var warning
                                stan::math::initialize(ihd_event, DUMMY_VAR__);
                                stan::math::fill(ihd_event, DUMMY_VAR__);
                                current_statement_begin__ = 1371;
                                local_scalar_t__ ihd(DUMMY_VAR__);
                                (void) ihd;  // dummy to suppress unused var warning
                                stan::math::initialize(ihd, DUMMY_VAR__);
                                stan::math::fill(ihd, DUMMY_VAR__);
                                current_statement_begin__ = 1372;
                                local_scalar_t__ mi_event(DUMMY_VAR__);
                                (void) mi_event;  // dummy to suppress unused var warning
                                stan::math::initialize(mi_event, DUMMY_VAR__);
                                stan::math::fill(mi_event, DUMMY_VAR__);
                                current_statement_begin__ = 1373;
                                local_scalar_t__ mi(DUMMY_VAR__);
                                (void) mi;  // dummy to suppress unused var warning
                                stan::math::initialize(mi, DUMMY_VAR__);
                                stan::math::fill(mi, DUMMY_VAR__);
                                current_statement_begin__ = 1374;
                                local_scalar_t__ renal(DUMMY_VAR__);
                                (void) renal;  // dummy to suppress unused var warning
                                stan::math::initialize(renal, DUMMY_VAR__);
                                stan::math::fill(renal, DUMMY_VAR__);
                                current_statement_begin__ = 1375;
                                local_scalar_t__ stroke_event(DUMMY_VAR__);
                                (void) stroke_event;  // dummy to suppress unused var warning
                                stan::math::initialize(stroke_event, DUMMY_VAR__);
                                stan::math::fill(stroke_event, DUMMY_VAR__);
                                current_statement_begin__ = 1376;
                                local_scalar_t__ rand(DUMMY_VAR__);
                                (void) rand;  // dummy to suppress unused var warning
                                stan::math::initialize(rand, DUMMY_VAR__);
                                stan::math::fill(rand, DUMMY_VAR__);
                                current_statement_begin__ = 1377;
                                stan::math::assign(intercept, normal_rng(-(4.868), 0.828, base_rng__));
                                current_statement_begin__ = 1378;
                                stan::math::assign(age, normal_rng(0.050, 0.010, base_rng__));
                                current_statement_begin__ = 1379;
                                stan::math::assign(atfi, normal_rng(1.081, 0.396, base_rng__));
                                current_statement_begin__ = 1380;
                                stan::math::assign(pv, normal_rng(0.352, 0.178, base_rng__));
                                current_statement_begin__ = 1381;
                                stan::math::assign(wb, normal_rng(0.089, 0.038, base_rng__));
                                current_statement_begin__ = 1382;
                                stan::math::assign(hdl, normal_rng(0.068, 0.030, base_rng__));
                                current_statement_begin__ = 1383;
                                stan::math::assign(amp_event, normal_rng(-(1.267), 0.344, base_rng__));
                                current_statement_begin__ = 1384;
                                stan::math::assign(amp, normal_rng(0.753, 0.300, base_rng__));
                                current_statement_begin__ = 1385;
                                stan::math::assign(amp_event2, normal_rng(-(1.727), 0.467, base_rng__));
                                current_statement_begin__ = 1386;
                                stan::math::assign(ihd_event, normal_rng(0.583, 0.243, base_rng__));
                                current_statement_begin__ = 1387;
                                stan::math::assign(ihd, normal_rng(-(0.507), 0.191, base_rng__));
                                current_statement_begin__ = 1388;
                                stan::math::assign(mi_event, normal_rng(0.982, 0.230, base_rng__));
                                current_statement_begin__ = 1389;
                                stan::math::assign(mi, normal_rng(0.440, 0.186, base_rng__));
                                current_statement_begin__ = 1390;
                                stan::math::assign(renal, normal_rng(0.961, 0.396, base_rng__));
                                current_statement_begin__ = 1391;
                                stan::math::assign(stroke_event, normal_rng(-(0.619), 0.246, base_rng__));
                                current_statement_begin__ = 1392;
                                stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                current_statement_begin__ = 1393;
                                stan::math::assign(update, simDeath_sub(update, intercept, atfi, age, hdl, pv, wb, amp_event, amp, amp_event2, ihd_event, ihd, mi_event, mi, renal, stroke_event, rand, pstream__));
                                }
                            }
                            current_statement_begin__ = 1396;
                            if (as_bool(logical_neq(get_base1(update, 32, "update", 1), 0))) {
                                {
                                current_statement_begin__ = 1397;
                                local_scalar_t__ mmalb_aux(DUMMY_VAR__);
                                (void) mmalb_aux;  // dummy to suppress unused var warning
                                stan::math::initialize(mmalb_aux, DUMMY_VAR__);
                                stan::math::fill(mmalb_aux, DUMMY_VAR__);
                                current_statement_begin__ = 1398;
                                local_scalar_t__ pvd_aux(DUMMY_VAR__);
                                (void) pvd_aux;  // dummy to suppress unused var warning
                                stan::math::initialize(pvd_aux, DUMMY_VAR__);
                                stan::math::fill(pvd_aux, DUMMY_VAR__);
                                current_statement_begin__ = 1399;
                                local_scalar_t__ atfib_aux(DUMMY_VAR__);
                                (void) atfib_aux;  // dummy to suppress unused var warning
                                stan::math::initialize(atfib_aux, DUMMY_VAR__);
                                stan::math::fill(atfib_aux, DUMMY_VAR__);
                                current_statement_begin__ = 1400;
                                local_scalar_t__ smoker_aux(DUMMY_VAR__);
                                (void) smoker_aux;  // dummy to suppress unused var warning
                                stan::math::initialize(smoker_aux, DUMMY_VAR__);
                                stan::math::fill(smoker_aux, DUMMY_VAR__);
                                current_statement_begin__ = 1401;
                                local_scalar_t__ egfr60l_binary(DUMMY_VAR__);
                                (void) egfr60l_binary;  // dummy to suppress unused var warning
                                stan::math::initialize(egfr60l_binary, DUMMY_VAR__);
                                stan::math::fill(egfr60l_binary, DUMMY_VAR__);
                                current_statement_begin__ = 1403;
                                local_scalar_t__ constant(DUMMY_VAR__);
                                (void) constant;  // dummy to suppress unused var warning
                                stan::math::initialize(constant, DUMMY_VAR__);
                                stan::math::fill(constant, DUMMY_VAR__);
                                current_statement_begin__ = 1404;
                                local_scalar_t__ phi(DUMMY_VAR__);
                                (void) phi;  // dummy to suppress unused var warning
                                stan::math::initialize(phi, DUMMY_VAR__);
                                stan::math::fill(phi, DUMMY_VAR__);
                                current_statement_begin__ = 1405;
                                local_scalar_t__ female(DUMMY_VAR__);
                                (void) female;  // dummy to suppress unused var warning
                                stan::math::initialize(female, DUMMY_VAR__);
                                stan::math::fill(female, DUMMY_VAR__);
                                current_statement_begin__ = 1406;
                                local_scalar_t__ african(DUMMY_VAR__);
                                (void) african;  // dummy to suppress unused var warning
                                stan::math::initialize(african, DUMMY_VAR__);
                                stan::math::fill(african, DUMMY_VAR__);
                                current_statement_begin__ = 1407;
                                local_scalar_t__ asian(DUMMY_VAR__);
                                (void) asian;  // dummy to suppress unused var warning
                                stan::math::initialize(asian, DUMMY_VAR__);
                                stan::math::fill(asian, DUMMY_VAR__);
                                current_statement_begin__ = 1408;
                                local_scalar_t__ age_diag(DUMMY_VAR__);
                                (void) age_diag;  // dummy to suppress unused var warning
                                stan::math::initialize(age_diag, DUMMY_VAR__);
                                stan::math::fill(age_diag, DUMMY_VAR__);
                                current_statement_begin__ = 1409;
                                local_scalar_t__ smoker(DUMMY_VAR__);
                                (void) smoker;  // dummy to suppress unused var warning
                                stan::math::initialize(smoker, DUMMY_VAR__);
                                stan::math::fill(smoker, DUMMY_VAR__);
                                current_statement_begin__ = 1410;
                                local_scalar_t__ smoker_first(DUMMY_VAR__);
                                (void) smoker_first;  // dummy to suppress unused var warning
                                stan::math::initialize(smoker_first, DUMMY_VAR__);
                                stan::math::fill(smoker_first, DUMMY_VAR__);
                                current_statement_begin__ = 1411;
                                local_scalar_t__ sbp(DUMMY_VAR__);
                                (void) sbp;  // dummy to suppress unused var warning
                                stan::math::initialize(sbp, DUMMY_VAR__);
                                stan::math::fill(sbp, DUMMY_VAR__);
                                current_statement_begin__ = 1412;
                                local_scalar_t__ hb1ac(DUMMY_VAR__);
                                (void) hb1ac;  // dummy to suppress unused var warning
                                stan::math::initialize(hb1ac, DUMMY_VAR__);
                                stan::math::fill(hb1ac, DUMMY_VAR__);
                                current_statement_begin__ = 1413;
                                local_scalar_t__ bmi(DUMMY_VAR__);
                                (void) bmi;  // dummy to suppress unused var warning
                                stan::math::initialize(bmi, DUMMY_VAR__);
                                stan::math::fill(bmi, DUMMY_VAR__);
                                current_statement_begin__ = 1414;
                                local_scalar_t__ hdl(DUMMY_VAR__);
                                (void) hdl;  // dummy to suppress unused var warning
                                stan::math::initialize(hdl, DUMMY_VAR__);
                                stan::math::fill(hdl, DUMMY_VAR__);
                                current_statement_begin__ = 1415;
                                local_scalar_t__ ldl(DUMMY_VAR__);
                                (void) ldl;  // dummy to suppress unused var warning
                                stan::math::initialize(ldl, DUMMY_VAR__);
                                stan::math::fill(ldl, DUMMY_VAR__);
                                current_statement_begin__ = 1416;
                                local_scalar_t__ efgr(DUMMY_VAR__);
                                (void) efgr;  // dummy to suppress unused var warning
                                stan::math::initialize(efgr, DUMMY_VAR__);
                                stan::math::fill(efgr, DUMMY_VAR__);
                                current_statement_begin__ = 1417;
                                local_scalar_t__ efgr_first(DUMMY_VAR__);
                                (void) efgr_first;  // dummy to suppress unused var warning
                                stan::math::initialize(efgr_first, DUMMY_VAR__);
                                stan::math::fill(efgr_first, DUMMY_VAR__);
                                current_statement_begin__ = 1418;
                                local_scalar_t__ rf_prev_value(DUMMY_VAR__);
                                (void) rf_prev_value;  // dummy to suppress unused var warning
                                stan::math::initialize(rf_prev_value, DUMMY_VAR__);
                                stan::math::fill(rf_prev_value, DUMMY_VAR__);
                                current_statement_begin__ = 1419;
                                local_scalar_t__ rf_first_value(DUMMY_VAR__);
                                (void) rf_first_value;  // dummy to suppress unused var warning
                                stan::math::initialize(rf_first_value, DUMMY_VAR__);
                                stan::math::fill(rf_first_value, DUMMY_VAR__);
                                current_statement_begin__ = 1420;
                                local_scalar_t__ diabet_years(DUMMY_VAR__);
                                (void) diabet_years;  // dummy to suppress unused var warning
                                stan::math::initialize(diabet_years, DUMMY_VAR__);
                                stan::math::fill(diabet_years, DUMMY_VAR__);
                                current_statement_begin__ = 1421;
                                local_scalar_t__ rand(DUMMY_VAR__);
                                (void) rand;  // dummy to suppress unused var warning
                                stan::math::initialize(rand, DUMMY_VAR__);
                                stan::math::fill(rand, DUMMY_VAR__);
                                current_statement_begin__ = 1423;
                                stan::math::assign(constant, normal_rng(-(9.047), 0.443, base_rng__));
                                current_statement_begin__ = 1424;
                                stan::math::assign(phi, ro_rng(1.138, 0.049, base_rng__, pstream__));
                                current_statement_begin__ = 1425;
                                stan::math::assign(female, normal_rng(-(0.463), 0.077, base_rng__));
                                current_statement_begin__ = 1426;
                                stan::math::assign(age_diag, normal_rng(0.012, 0.004, base_rng__));
                                current_statement_begin__ = 1427;
                                stan::math::assign(smoker, normal_rng(0.329, 0.076, base_rng__));
                                current_statement_begin__ = 1428;
                                stan::math::assign(sbp, normal_rng(0.186, 0.018, base_rng__));
                                current_statement_begin__ = 1429;
                                stan::math::assign(hb1ac, normal_rng(0.165, 0.028, base_rng__));
                                current_statement_begin__ = 1430;
                                stan::math::assign(bmi, normal_rng(0.028, 0.006, base_rng__));
                                current_statement_begin__ = 1431;
                                stan::math::assign(hdl, normal_rng(-(0.03), 0.013, base_rng__));
                                current_statement_begin__ = 1432;
                                stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                current_statement_begin__ = 1433;
                                stan::math::assign(mmalb_aux, micalb_rf(update, constant, phi, female, age_diag, smoker, sbp, hb1ac, bmi, hdl, rand, pstream__));
                                current_statement_begin__ = 1436;
                                stan::math::assign(constant, normal_rng(-(11.784), 0.425, base_rng__));
                                current_statement_begin__ = 1437;
                                stan::math::assign(phi, ro_rng(1.871, 0.052, base_rng__, pstream__));
                                current_statement_begin__ = 1438;
                                stan::math::assign(female, normal_rng(0.745, 0.067, base_rng__));
                                current_statement_begin__ = 1439;
                                stan::math::assign(african, normal_rng(-(0.974), 0.169, base_rng__));
                                current_statement_begin__ = 1440;
                                stan::math::assign(asian, normal_rng(-(0.302), 0.142, base_rng__));
                                current_statement_begin__ = 1441;
                                stan::math::assign(age_diag, normal_rng(0.08, 0.005, base_rng__));
                                current_statement_begin__ = 1442;
                                stan::math::assign(sbp, normal_rng(0.075, 0.017, base_rng__));
                                current_statement_begin__ = 1443;
                                stan::math::assign(bmi, normal_rng(0.014, 0.006, base_rng__));
                                current_statement_begin__ = 1444;
                                stan::math::assign(hdl, normal_rng(-(0.028), 0.011, base_rng__));
                                current_statement_begin__ = 1445;
                                stan::math::assign(ldl, normal_rng(0.008, 0.003, base_rng__));
                                current_statement_begin__ = 1446;
                                stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                current_statement_begin__ = 1447;
                                stan::math::assign(egfr60l_binary, efgr60l_binary(update, constant, phi, female, african, asian, age_diag, sbp, bmi, hdl, ldl, rand, pstream__));
                                current_statement_begin__ = 1450;
                                if (as_bool((primitive_value(logical_eq(modulus(3, i), 1)) && primitive_value(logical_gt(i, 1))))) {
                                    current_statement_begin__ = 1452;
                                    stan::math::assign(constant, normal_rng(-(12.271), 0.058, base_rng__));
                                    current_statement_begin__ = 1453;
                                    stan::math::assign(phi, ro_rng(1.515, 0.058, base_rng__, pstream__));
                                    current_statement_begin__ = 1454;
                                    stan::math::assign(age_diag, normal_rng(0.057, 0.006, base_rng__));
                                    current_statement_begin__ = 1455;
                                    stan::math::assign(smoker, normal_rng(0.865, 0.083, base_rng__));
                                    current_statement_begin__ = 1456;
                                    stan::math::assign(sbp, normal_rng(0.098, 0.022, base_rng__));
                                    current_statement_begin__ = 1457;
                                    stan::math::assign(hb1ac, normal_rng(0.095, 0.022, base_rng__));
                                    current_statement_begin__ = 1458;
                                    stan::math::assign(bmi, normal_rng(0.023, 0.007, base_rng__));
                                    current_statement_begin__ = 1459;
                                    stan::math::assign(ldl, normal_rng(0.025, 0.003, base_rng__));
                                    current_statement_begin__ = 1460;
                                    stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                    current_statement_begin__ = 1461;
                                    stan::math::assign(pvd_aux, pvd_rf(update, constant, phi, age_diag, smoker, sbp, hb1ac, bmi, ldl, rand, pstream__));
                                    current_statement_begin__ = 1464;
                                    stan::math::assign(constant, normal_rng(-(13.313), 1.148, base_rng__));
                                    current_statement_begin__ = 1465;
                                    stan::math::assign(age_diag, normal_rng(0.057, 0.006, base_rng__));
                                    current_statement_begin__ = 1466;
                                    stan::math::assign(bmi, normal_rng(0.023, 0.007, base_rng__));
                                    current_statement_begin__ = 1467;
                                    stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                    current_statement_begin__ = 1468;
                                    stan::math::assign(atfib_aux, atfib_rf(update, constant, age_diag, bmi, rand, pstream__));
                                    current_statement_begin__ = 1470;
                                    stan::math::assign(constant, normal_rng(-(9.047), 0.443, base_rng__));
                                    current_statement_begin__ = 1471;
                                    stan::math::assign(female, normal_rng(-(0.463), 0.077, base_rng__));
                                    current_statement_begin__ = 1472;
                                    stan::math::assign(age_diag, normal_rng(0.012, 0.004, base_rng__));
                                    current_statement_begin__ = 1473;
                                    stan::math::assign(smoker, normal_rng(0.329, 0.076, base_rng__));
                                    current_statement_begin__ = 1474;
                                    stan::math::assign(diabet_years, normal_rng(-(1.574), 0.169, base_rng__));
                                    current_statement_begin__ = 1475;
                                    stan::math::assign(smoker_first, normal_rng(5.535, 0.436, base_rng__));
                                    current_statement_begin__ = 1476;
                                    stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                    current_statement_begin__ = 1477;
                                    stan::math::assign(smoker_aux, smoke_rf(update, constant, female, age_diag, smoker, diabet_years, smoker_first, rand, pstream__));
                                }
                                current_statement_begin__ = 1482;
                                stan::math::assign(constant, normal_rng(1.419, 0.041, base_rng__));
                                current_statement_begin__ = 1483;
                                stan::math::assign(female, normal_rng(0.054, 0.012, base_rng__));
                                current_statement_begin__ = 1484;
                                stan::math::assign(african, normal_rng(0.066, 0.026, base_rng__));
                                current_statement_begin__ = 1485;
                                stan::math::assign(asian, normal_rng(0.046, 0.020, base_rng__));
                                current_statement_begin__ = 1486;
                                stan::math::assign(rf_prev_value, normal_rng(0.724, 0.005, base_rng__));
                                current_statement_begin__ = 1487;
                                stan::math::assign(diabet_years, normal_rng(0.141, 0.007, base_rng__));
                                current_statement_begin__ = 1488;
                                stan::math::assign(rf_first_value, normal_rng(0.081, 0.007, base_rng__));
                                current_statement_begin__ = 1489;
                                stan::math::assign(update, continuous_rf(10, update, constant, female, african, asian, rf_prev_value, diabet_years, rf_first_value, pstream__));
                                current_statement_begin__ = 1492;
                                stan::math::assign(constant, normal_rng(29.007, 0.597, base_rng__));
                                current_statement_begin__ = 1493;
                                stan::math::assign(female, normal_rng(0.684, 0.142, base_rng__));
                                current_statement_begin__ = 1494;
                                stan::math::assign(african, 0);
                                current_statement_begin__ = 1495;
                                stan::math::assign(asian, normal_rng(-(1.393), 0.224, base_rng__));
                                current_statement_begin__ = 1496;
                                stan::math::assign(rf_prev_value, normal_rng(0.669, 0.005, base_rng__));
                                current_statement_begin__ = 1497;
                                stan::math::assign(diabet_years, normal_rng(0.57, 0.064, base_rng__));
                                current_statement_begin__ = 1498;
                                stan::math::assign(rf_first_value, normal_rng(0.118, 0.005, base_rng__));
                                current_statement_begin__ = 1499;
                                stan::math::assign(update, continuous_rf(9, update, constant, female, african, asian, rf_prev_value, diabet_years, rf_first_value, pstream__));
                                current_statement_begin__ = 1502;
                                stan::math::assign(constant, normal_rng(0.763, 0.02, base_rng__));
                                current_statement_begin__ = 1503;
                                stan::math::assign(female, normal_rng(0.065, 0.009, base_rng__));
                                current_statement_begin__ = 1504;
                                stan::math::assign(african, normal_rng(0.05, 0.016, base_rng__));
                                current_statement_begin__ = 1505;
                                stan::math::assign(asian, normal_rng(0.074, 0.014, base_rng__));
                                current_statement_begin__ = 1506;
                                stan::math::assign(rf_prev_value, normal_rng(0.578, 0.007, base_rng__));
                                current_statement_begin__ = 1507;
                                stan::math::assign(diabet_years, normal_rng(-(0.042), 0.004, base_rng__));
                                current_statement_begin__ = 1508;
                                stan::math::assign(rf_first_value, normal_rng(0.21, 0.007, base_rng__));
                                current_statement_begin__ = 1509;
                                stan::math::assign(update, cholesterol_rf(12, update, constant, female, african, asian, rf_prev_value, diabet_years, rf_first_value, pstream__));
                                current_statement_begin__ = 1512;
                                stan::math::assign(constant, normal_rng(0.17, 0.009, base_rng__));
                                current_statement_begin__ = 1513;
                                stan::math::assign(female, normal_rng(0.043, 0.003, base_rng__));
                                current_statement_begin__ = 1514;
                                stan::math::assign(african, normal_rng(0.051, 0.006, base_rng__));
                                current_statement_begin__ = 1515;
                                stan::math::assign(asian, 0);
                                current_statement_begin__ = 1516;
                                stan::math::assign(rf_prev_value, normal_rng(0.603, 0.015, base_rng__));
                                current_statement_begin__ = 1517;
                                stan::math::assign(diabet_years, 0);
                                current_statement_begin__ = 1518;
                                stan::math::assign(rf_first_value, normal_rng(0.22, 0.009, base_rng__));
                                current_statement_begin__ = 1519;
                                stan::math::assign(update, cholesterol_rf(11, update, constant, female, african, asian, rf_prev_value, diabet_years, rf_first_value, pstream__));
                                current_statement_begin__ = 1522;
                                stan::math::assign(constant, normal_rng(0.83, 0.039, base_rng__));
                                current_statement_begin__ = 1523;
                                stan::math::assign(female, normal_rng(0.045, 0.011, base_rng__));
                                current_statement_begin__ = 1524;
                                stan::math::assign(african, normal_rng(-(0.094), 0.016, base_rng__));
                                current_statement_begin__ = 1525;
                                stan::math::assign(asian, normal_rng(-(0.087), 0.014, base_rng__));
                                current_statement_begin__ = 1526;
                                stan::math::assign(rf_prev_value, normal_rng(0.952, 0.003, base_rng__));
                                current_statement_begin__ = 1527;
                                stan::math::assign(diabet_years, normal_rng(-(0.165), 0.006, base_rng__));
                                current_statement_begin__ = 1528;
                                stan::math::assign(rf_first_value, normal_rng(0.034, 0.003, base_rng__));
                                current_statement_begin__ = 1529;
                                stan::math::assign(update, continuous_rf(13, update, constant, female, african, asian, rf_prev_value, diabet_years, rf_first_value, pstream__));
                                current_statement_begin__ = 1532;
                                if (as_bool(logical_eq(egfr60l_binary, 1))) {
                                    current_statement_begin__ = 1534;
                                    stan::math::assign(constant, normal_rng(26.102, 0.976, base_rng__));
                                    current_statement_begin__ = 1535;
                                    stan::math::assign(phi, 9.452);
                                    current_statement_begin__ = 1536;
                                    stan::math::assign(female, normal_rng(-(2.409), 0.271, base_rng__));
                                    current_statement_begin__ = 1537;
                                    stan::math::assign(african, normal_rng(2.162, 0.594, base_rng__));
                                    current_statement_begin__ = 1538;
                                    stan::math::assign(asian, normal_rng(1.229, 0.506, base_rng__));
                                    current_statement_begin__ = 1539;
                                    stan::math::assign(diabet_years, normal_rng(-(3.28), 0.185, base_rng__));
                                    current_statement_begin__ = 1540;
                                    stan::math::assign(efgr, normal_rng(0.567, 0.01, base_rng__));
                                    current_statement_begin__ = 1541;
                                    stan::math::assign(efgr_first, normal_rng(0.138, 0.009, base_rng__));
                                    current_statement_begin__ = 1542;
                                    stan::math::assign(update, egfr60less_rf(update, constant, phi, female, african, asian, efgr, efgr_first, diabet_years, pstream__));
                                } else if (as_bool(logical_eq(egfr60l_binary, 0))) {
                                    current_statement_begin__ = 1547;
                                    stan::math::assign(constant, normal_rng(23.97, 0.783, base_rng__));
                                    current_statement_begin__ = 1548;
                                    stan::math::assign(phi, 12.575);
                                    current_statement_begin__ = 1549;
                                    stan::math::assign(female, normal_rng(-(2.985), 0.262, base_rng__));
                                    current_statement_begin__ = 1550;
                                    stan::math::assign(african, normal_rng(3.419, 0.474, base_rng__));
                                    current_statement_begin__ = 1551;
                                    stan::math::assign(asian, normal_rng(2.404, 0.421, base_rng__));
                                    current_statement_begin__ = 1552;
                                    stan::math::assign(diabet_years, normal_rng(-(3.013), 0.128, base_rng__));
                                    current_statement_begin__ = 1553;
                                    stan::math::assign(efgr, normal_rng(0.406, 0.006, base_rng__));
                                    current_statement_begin__ = 1554;
                                    stan::math::assign(efgr_first, normal_rng(0.297, 0.008, base_rng__));
                                    current_statement_begin__ = 1555;
                                    stan::math::assign(update, egfr60more_rf(update, constant, phi, female, african, asian, efgr, efgr_first, diabet_years, pstream__));
                                }
                                current_statement_begin__ = 1559;
                                if (as_bool((primitive_value(logical_eq(modulus(3, i), 1)) && primitive_value(logical_gt(i, 1))))) {
                                    current_statement_begin__ = 1561;
                                    stan::math::assign(constant, normal_rng(31.231, 1.468, base_rng__));
                                    current_statement_begin__ = 1562;
                                    stan::math::assign(female, normal_rng(1.006, 0.316, base_rng__));
                                    current_statement_begin__ = 1563;
                                    stan::math::assign(african, 0);
                                    current_statement_begin__ = 1564;
                                    stan::math::assign(asian, 0);
                                    current_statement_begin__ = 1565;
                                    stan::math::assign(rf_prev_value, normal_rng(0.327, 0.021, base_rng__));
                                    current_statement_begin__ = 1566;
                                    stan::math::assign(diabet_years, normal_rng(0.918, 0.469, base_rng__));
                                    current_statement_begin__ = 1567;
                                    stan::math::assign(rf_first_value, normal_rng(0.272, 0.021, base_rng__));
                                    current_statement_begin__ = 1568;
                                    stan::math::assign(update, continuous_rf(18, update, constant, female, african, asian, rf_prev_value, age_diag, rf_first_value, pstream__));
                                    current_statement_begin__ = 1571;
                                    stan::math::assign(constant, normal_rng(1.446, 0.242, base_rng__));
                                    current_statement_begin__ = 1572;
                                    stan::math::assign(female, normal_rng(0.087, 0.042, base_rng__));
                                    current_statement_begin__ = 1573;
                                    stan::math::assign(african, normal_rng(-(0.331), 0.066, base_rng__));
                                    current_statement_begin__ = 1574;
                                    stan::math::assign(asian, 0);
                                    current_statement_begin__ = 1575;
                                    stan::math::assign(rf_prev_value, normal_rng(0.46, 0.116, base_rng__));
                                    current_statement_begin__ = 1576;
                                    stan::math::assign(diabet_years, normal_rng(0.167, 0.05, base_rng__));
                                    current_statement_begin__ = 1577;
                                    stan::math::assign(rf_first_value, normal_rng(0.292, 0.1, base_rng__));
                                    current_statement_begin__ = 1578;
                                    stan::math::assign(update, continuous_rf(14, update, constant, female, african, asian, rf_prev_value, age_diag, rf_first_value, pstream__));
                                    current_statement_begin__ = 1581;
                                    stan::math::assign(constant, normal_rng(5.04, 0.295, base_rng__));
                                    current_statement_begin__ = 1582;
                                    stan::math::assign(female, normal_rng(-(0.349), 0.036, base_rng__));
                                    current_statement_begin__ = 1583;
                                    stan::math::assign(african, normal_rng(-(0.185), 0.045, base_rng__));
                                    current_statement_begin__ = 1584;
                                    stan::math::assign(asian, 0);
                                    current_statement_begin__ = 1585;
                                    stan::math::assign(rf_prev_value, 0);
                                    current_statement_begin__ = 1586;
                                    stan::math::assign(diabet_years, normal_rng(-(0.326), 0.028, base_rng__));
                                    current_statement_begin__ = 1587;
                                    stan::math::assign(rf_first_value, normal_rng(0.692, 0.02, base_rng__));
                                    current_statement_begin__ = 1588;
                                    stan::math::assign(update, continuous_rf(17, update, constant, female, african, asian, rf_prev_value, age_diag, rf_first_value, pstream__));
                                    current_statement_begin__ = 1591;
                                    stan::model::assign(update, 
                                                stan::model::cons_list(stan::model::index_uni(16), stan::model::nil_index_list()), 
                                                pvd_aux, 
                                                "assigning variable update");
                                    current_statement_begin__ = 1592;
                                    stan::model::assign(update, 
                                                stan::model::cons_list(stan::model::index_uni(20), stan::model::nil_index_list()), 
                                                atfib_aux, 
                                                "assigning variable update");
                                    current_statement_begin__ = 1593;
                                    stan::model::assign(update, 
                                                stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list()), 
                                                smoker_aux, 
                                                "assigning variable update");
                                }
                                current_statement_begin__ = 1595;
                                stan::model::assign(update, 
                                            stan::model::cons_list(stan::model::index_uni(19), stan::model::nil_index_list()), 
                                            mmalb_aux, 
                                            "assigning variable update");
                                current_statement_begin__ = 1596;
                                stan::model::assign(update, 
                                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                            (stan::model::rvalue(update, stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), "update") + 1), 
                                            "assigning variable update");
                                current_statement_begin__ = 1597;
                                stan::model::assign(update, 
                                            stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                                            (stan::model::rvalue(update, stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), "update") + 1), 
                                            "assigning variable update");
                                }
                            }
                            current_statement_begin__ = 1599;
                            stan::model::assign(update, 
                                        stan::model::cons_list(stan::model::index_uni(33), stan::model::nil_index_list()), 
                                        0, 
                                        "assigning variable update");
                            current_statement_begin__ = 1600;
                            stan::model::assign(update, 
                                        stan::model::cons_list(stan::model::index_uni(34), stan::model::nil_index_list()), 
                                        0, 
                                        "assigning variable update");
                            current_statement_begin__ = 1601;
                            stan::model::assign(update, 
                                        stan::model::cons_list(stan::model::index_uni(35), stan::model::nil_index_list()), 
                                        0, 
                                        "assigning variable update");
                            current_statement_begin__ = 1602;
                            stan::model::assign(update, 
                                        stan::model::cons_list(stan::model::index_uni(36), stan::model::nil_index_list()), 
                                        0, 
                                        "assigning variable update");
                            current_statement_begin__ = 1603;
                            stan::model::assign(update, 
                                        stan::model::cons_list(stan::model::index_uni(37), stan::model::nil_index_list()), 
                                        0, 
                                        "assigning variable update");
                            current_statement_begin__ = 1604;
                            stan::model::assign(update, 
                                        stan::model::cons_list(stan::model::index_uni(38), stan::model::nil_index_list()), 
                                        0, 
                                        "assigning variable update");
                        }
                    }
                    current_statement_begin__ = 1607;
                    if (as_bool(logical_eq(m, 2))) {
                        current_statement_begin__ = 1608;
                        stan::math::assign(output, update);
                        current_statement_begin__ = 1609;
                        stan::model::assign(mat_temp, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    update, 
                                    "assigning variable mat_temp");
                    } else if (as_bool(logical_eq(m, 1))) {
                        current_statement_begin__ = 1612;
                        stan::math::assign(output_wr, update);
                        current_statement_begin__ = 1613;
                        stan::model::assign(mat_temp_wr, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    update, 
                                    "assigning variable mat_temp_wr");
                    }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 830;
            size_t mat_temp_k_0_max__ = time;
            size_t mat_temp_k_1_max__ = len_his;
            for (size_t k_1__ = 0; k_1__ < mat_temp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < mat_temp_k_0_max__; ++k_0__) {
                    vars__.push_back(mat_temp[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 831;
            size_t mat_temp_wr_k_0_max__ = time;
            size_t mat_temp_wr_k_1_max__ = len_his;
            for (size_t k_1__ = 0; k_1__ < mat_temp_wr_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < mat_temp_wr_k_0_max__; ++k_0__) {
                    vars__.push_back(mat_temp_wr[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 832;
            size_t order_k_0_max__ = complicaciones;
            for (size_t k_0__ = 0; k_0__ < order_k_0_max__; ++k_0__) {
                vars__.push_back(order[k_0__]);
            }
            current_statement_begin__ = 833;
            stan::math::check_simplex(function__, "theta", theta);
            size_t theta_j_1_max__ = complicaciones;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                vars__.push_back(theta(j_1__));
            }
            current_statement_begin__ = 834;
            size_t history_k_0_max__ = len_his;
            for (size_t k_0__ = 0; k_0__ < history_k_0_max__; ++k_0__) {
                vars__.push_back(history[k_0__]);
            }
            current_statement_begin__ = 835;
            size_t update_k_0_max__ = len_his;
            for (size_t k_0__ = 0; k_0__ < update_k_0_max__; ++k_0__) {
                vars__.push_back(update[k_0__]);
            }
            current_statement_begin__ = 836;
            size_t output_k_0_max__ = len_his;
            for (size_t k_0__ = 0; k_0__ < output_k_0_max__; ++k_0__) {
                vars__.push_back(output[k_0__]);
            }
            current_statement_begin__ = 837;
            size_t output_wr_k_0_max__ = len_his;
            for (size_t k_0__ = 0; k_0__ < output_wr_k_0_max__; ++k_0__) {
                vars__.push_back(output_wr[k_0__]);
            }
            current_statement_begin__ = 838;
            vars__.push_back(primera);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_diabetesnewmodel";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t mat_temp_k_0_max__ = time;
        size_t mat_temp_k_1_max__ = len_his;
        for (size_t k_1__ = 0; k_1__ < mat_temp_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < mat_temp_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mat_temp" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mat_temp_wr_k_0_max__ = time;
        size_t mat_temp_wr_k_1_max__ = len_his;
        for (size_t k_1__ = 0; k_1__ < mat_temp_wr_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < mat_temp_wr_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mat_temp_wr" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t order_k_0_max__ = complicaciones;
        for (size_t k_0__ = 0; k_0__ < order_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "order" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = complicaciones;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t history_k_0_max__ = len_his;
        for (size_t k_0__ = 0; k_0__ < history_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "history" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t update_k_0_max__ = len_his;
        for (size_t k_0__ = 0; k_0__ < update_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "update" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t output_k_0_max__ = len_his;
        for (size_t k_0__ = 0; k_0__ < output_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "output" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t output_wr_k_0_max__ = len_his;
        for (size_t k_0__ = 0; k_0__ < output_wr_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "output_wr" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "primera";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t mat_temp_k_0_max__ = time;
        size_t mat_temp_k_1_max__ = len_his;
        for (size_t k_1__ = 0; k_1__ < mat_temp_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < mat_temp_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mat_temp" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mat_temp_wr_k_0_max__ = time;
        size_t mat_temp_wr_k_1_max__ = len_his;
        for (size_t k_1__ = 0; k_1__ < mat_temp_wr_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < mat_temp_wr_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mat_temp_wr" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t order_k_0_max__ = complicaciones;
        for (size_t k_0__ = 0; k_0__ < order_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "order" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = (complicaciones - 1);
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t history_k_0_max__ = len_his;
        for (size_t k_0__ = 0; k_0__ < history_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "history" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t update_k_0_max__ = len_his;
        for (size_t k_0__ = 0; k_0__ < update_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "update" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t output_k_0_max__ = len_his;
        for (size_t k_0__ = 0; k_0__ < output_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "output" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t output_wr_k_0_max__ = len_his;
        for (size_t k_0__ = 0; k_0__ < output_wr_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "output_wr" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "primera";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_diabetesnewmodel_namespace::model_diabetesnewmodel stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
